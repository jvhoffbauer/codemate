from fastapi import HTTPException, Request
from firebase_admin import auth as firebase_auth
from firebase_admin.auth import (
    CertificateFetchError,
    ExpiredIdTokenError,
    InvalidIdTokenError,
    RevokedIdTokenError,
    UserDisabledError,
)

from app import models

PUBLIC_ROUTES = [
    "/api/auth/signup", [CURSOR]
]


class FirebaseAuthMiddleware:
    async def __call__(self, request: Request, call_next, *args, **kwargs):
        # Check if the route is public
        if (
            not request.url.path.startswith("/api")
            or request.method == "OPTIONS"
            or any([request.url.path.startswith(r) for r in PUBLIC_ROUTES])
        ):
            return await call_next(request)

        # Check if the user is logged in
        else:
            # Get the authorization header
            authorization_header = request.headers.get("Authorization")

            # Ensure the authorization header is present
            if not authorization_header:
                raise HTTPException(status_code=400, detail="Missing auth token")

            # Try to verify the token and get the user
            try: [CURSOR]
                user = firebase_auth.verify_id_token(authorization_header)
                request.state.firebase_user = user
                request.state.user = models.get_user(user["uid"])
            except (
                ValueError,
                InvalidIdTokenError,
                ExpiredIdTokenError,
                RevokedIdTokenError,
                CertificateFetchError,
                UserDisabledError,
            ):
                raise HTTPException(status_code=400, detail="Invalid auth token")

            # Run the function
            return await call_next(request)