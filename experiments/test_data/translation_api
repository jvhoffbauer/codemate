import logging

import langcodes
from fastapi import APIRouter, Request
from fastapi_camelcase import CamelModel
from fluento import config, models, schemas
from fluento.wrapper import mixpanel
from google.cloud import translate_v3 as translate

router = APIRouter(prefix="/api/translation")
logger = logging.getLogger(__name__)


translation_client = translate.TranslationServiceClient.from_service_account_file(
    config.GC_TRANSLATION_CREDENTIALS
)


@router.post("")
def call_translate(
    request: Request, data: schemas.TranslationInput
) -> schemas.TranslationResult:
    # Limit text length to avoid abuse
    if len(data.text) > 100:
        return {"error": "text too long"}, 400

    # Get native language
    native_language = request.state.user.native_language
    try:
        native_language_code = langcodes.find(native_language).language
    except LookupError:
        native_language_code = None

    # Translate text
    response = translation_client.translate_text(
        request={
            "parent": config.GC_TRANSLATION_LOCATION,
            "contents": [data.text],
            "mime_type": "text/plain",
            "target_language_code": "en-US",
            "source_language_code": native_language_code,
        }
    )
    translation = response.translations[0].translated_text

    # Track in Mixpanel
    mixpanel.track_in_request(
        "Translate in Video Call",
        {
            "Text": data.text,
            "Translation": translation,
            "Native Language": native_language,
            "Native Language Code": native_language_code,
        },
        request=request,
    )

    return schemas.TranslationResult(translation=translation)
