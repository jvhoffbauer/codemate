
import streamlit as st
import time

st.set_page_config(page_title='Ejemplito b√°sico, de aqu√≠ al cielo', layout='wide',     page_icon="üìà")
st.image('ufv.png')

placeholder = st.empty()
with placeholder:
    #from PIL import Image
    #image = Image.open('mired.png')
    #placeholder.image(image, caption='MiRed semantic engine',use_column_width = 'always') 
    for seconds in range(5):
        placeholder.write(f"‚è≥ {seconds} Cargando sistema")
        time.sleep(1)
placeholder.empty()


st.write("# Vamos a ello üëã")

st.sidebar.success("Selecciona la √∫nica p√°gina que te voy a dejar seleccionar. Eres libre de seleccionar.")

st.markdown(
    """
    Este ejemplo lo he adaptado de la documentaci√≥n oficial de [streamlit.io](https://streamlit.io), 
    de su [documentaci√≥n](https://docs.streamlit.io) y de un proyecto de investigaci√≥n. Se usa para visualizar datos
    en forma de dashboard, aunque tambi√©n tiene capacidad para hacer apps web de tipo CRUD con un `backend` como [fastapi](https://fastapi.tiangolo.com).
    
    Ojo, este ejemplo es un punto de partida para vosotros, pero ni es visual, ni cuenta una historia. Lo siento, pero os pido mucho m√°s.
    
    Lo he montado como un dashboard con multiapp. Las p√°ginas est√°n bajo el directorio `pages`. Si quieeres a√±adir m√°s p√°ginas, a√±ade m√°s p√°ginas. Pero 
    tambi√©n podr√≠as montar un dashboard sin necesidad de que sea multip√°gina. 
    
    En la p√°gina principal voy a volcar todo el contenido de un dataframe. Esto no deber√≠a hacerse as√≠, sobretodo si el conjunto de datos es muy grande. 
    Es m√°s, puedes gestionar datos desde `streamlit` (app monol√≠tica=, pero
    ya hemos visto que una arquitectura basada en microservicios tiene ciertas ventajas sobre  una app monol√≠tica.
    
    La pr√°ctica os la voy a evaluar del siguiente modo:
    
    1. Para tener un apto (5) deber√©is buscar un conjunto de datos, documentarlo, y hacer un dashboard. La nota puede llegar a 6 en funci√≥n de 
       que lo que me quieras contar se entienda bien con el dashboard que me muestras. 
    2. Para llegar al 7, deber√° tener gr√°ficos de tipo interactivos.
    3. Para llegar al 8, en el backend deber√° tener un m√©todo post, que tenga sentido.
    4. Para llegar al 9, deber√°s utilizar una jerarqu√≠a de clases con BaseModel y, adem√°s, hacer una adecuada gesti√≥n de errores: excepciones y logs.
    5. Para llegar al 10, deber√≠as utilizar una base de datos en un servicio adicional. 
    6. Me har√≠a muy feliz si utilizaseis un ORM como SQLAlchemy.
   
    A por ello! üí™üí™üí™
"""
)
