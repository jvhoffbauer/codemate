{"original_code": "    def route_list(self) -> Callable:\n        async def route(\n            request: Request,\n            sel: self.AnnotatedSelect,  # type: ignore\n            paginator: Annotated[self.paginator, Depends()],  # type: ignore\n            filters: Annotated[self.schema_filter, Body()] = None,  # type: ignore\n        ):\n            if not await self.has_list_permission(request, paginator, filters):\n                return self.error_no_router_permission(request)\n            data = ItemListSchema(items=[])\n            data.query = request.query_params\n            if await self.has_filter_permission(request, filters):\n                data.filters = await self.on_filter_pre(request, filters)\n                if data.filters:\n                    sel = sel.filter(*self.calc_filter_clause(data.filters))\n            if paginator.show_total:\n                data.total = await self.db.async_scalar(\n                    select(func.count(\"*\")).select_from(\n                        sel.with_only_columns(self.pk).subquery()\n                    )\n                )\n            orderBy = self._calc_ordering(paginator.orderBy, paginator.orderDir)\n            if orderBy:\n                sel = sel.order_by(*orderBy)\n            sel = sel.limit(paginator.perPage).offset(\n                (paginator.page - 1) * paginator.perPage\n            )\n            result = await self.db.async_execute(sel)\n            return BaseApiOut(data=await self.on_list_after(request, result, data))\n\n        return route"}