{"original_code": "    def get_type_from_field(field: Any) -> Any:\n        type_: Any = field.annotation\n        # Resolve Optional fields\n        if type_ is None:\n            raise ValueError(\"Missing field type\")\n        origin = get_origin(type_)\n        if origin is None:\n            return type_\n        if _is_union_type(origin):\n            bases = get_args(type_)\n            if len(bases) > 2:\n                raise ValueError(\n                    \"Cannot have a (non-optional) union as a SQLAlchemy field\"\n                )\n            # Non optional unions are not allowed\n            if bases[0] is not NoneType and bases[1] is not NoneType:\n                raise ValueError(\n                    \"Cannot have a (non-optional) union as a SQLlchemy field\"\n                )\n            # Optional unions are allowed\n            return bases[0] if bases[0] is not NoneType else bases[1]\n        return origin"}