{"original_code": "    def get_field_amis_table_column_type(self, type_: Type) -> dict:\n        \"\"\"Get amis table column type from pydantic model field type.\"\"\"\n        kwargs = {}\n        type_ = annotation_outer_type(type_)\n        if type_ in {str, Any}:\n            pass\n        elif issubclass(type_, bool):\n            kwargs[\"type\"] = \"switch\"\n            kwargs[\"disabled\"] = True\n            kwargs[\"filterable\"] = {\n                \"options\": [\n                    {\"label\": _(\"YES\"), \"value\": True},\n                    {\"label\": _(\"NO\"), \"value\": False},\n                ]\n            }\n        elif issubclass(type_, datetime.datetime):\n            kwargs[\"type\"] = \"datetime\"\n        elif issubclass(type_, datetime.date):\n            kwargs[\"type\"] = \"date\"\n        elif issubclass(type_, datetime.time):\n            kwargs[\"type\"] = \"time\"\n        elif issubclass(type_, Enum):\n            items = (\n                type_.choices\n                if issubclass(type_, Choices)\n                else [(m.value, m.value) for m in type_]\n            )\n            kwargs[\"type\"] = \"mapping\"\n            kwargs[\"filterable\"] = {\n                \"options\": [{\"label\": v, \"value\": k} for k, v in items]\n            }\n            kwargs[\"map\"] = {\n                k: f\"<span class='label label-{label.value}'>{v}</span>\"\n                for (k, v), label in zip(items, cyclic_generator(LabelEnum))\n            }\n        elif issubclass(type_, (dict, Json)):\n            kwargs[\"type\"] = \"json\"\n        elif field_annotation_is_scalar_sequence(type_):\n            kwargs[\"type\"] = \"each\"\n            kwargs[\"items\"] = {\n                \"type\": \"tpl\",\n                \"tpl\": \"<span class='label label-info m-l-sm'><%= this.item %></span>\",\n            }\n        return kwargs"}