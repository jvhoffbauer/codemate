1. Create three instances of `Hero` class and assign them values for their attributes.
2. Assign a new value to one of the `Hero` objects' attribute.
3. Initialize an instance variable called `age` for another `Hero` object.
4. Print a message indicating that we are printing before any interaction with the database.
5. Print the first created `Hero` object.
6. Print the second created `Hero` object.
7. Print the third created `Hero` object.
8. Begin a context manager using the `Session` class from SQLAlchemy. This is where our interactions with the database will take place.
9. Add the first created `Hero` object to the current session.
10. Add the second created `Hero` object to the current session.
11. Add the third created `Hero` object to the current session.
12. Print a message indicating that we have added all the `Hero` objects to the session but not yet committed changes to the database.
13. Print the first created `Hero` object again after it has been added to the session.
14. Print the second created `Hero` object again after it has been added to the session.
15. Print the third created `Hero` object again after it has been added to the session.
16. Commit the changes made in this session to the database.
17. Print a message indicating that we have successfully committed changes to the database.
18. Print the first created `Hero` object again after it has been committed to the database.
19. Print the second created `Hero` object again after it has been committed to the database.
20. Print the third created `Hero` object again after it has been committed to the database.
21. Print a message indicating that we want to see the primary key generated by the database for each `Hero`.
22. Access the `ID` property of the first created `Hero` object.
23. Access the `ID` property of the second created `Hero` object.
24. Access the `ID` property of the third created `Hero` object.
25. Print a message indicating that we want to access the `name` property of each `Hero`.
26. Access the `name` property of the first created `Hero` object.
27. Access the `name` property of the second created `Hero` object.
28. Access the `name` property of the third created `Hero` object.
29. Refresh the state of the first created `Hero` object so that its properties match what is currently stored in the database instead of just what was assigned during initialization or modification within the program.
30. Refresh the state of the second created `Hero` object so that its properties match what is currently stored in the database instead of just what was assigned during initialization or modification within the program.
31. Refresh the state of the third created `Hero` object so that its properties match what is currently stored in the database instead of just what was assigned during initialization or modification within the program.
32. Print a message indicating that we have refreshed the state of all `Hero` objects.
33. Print the first created `Hero` object again after refreshing its state.
34. Print the second created `Hero` object again after refreshing its state.
35. Print the third created `Hero` object again after refreshing its state.
36. Close the context manager associated with the `Session` class.
37. Print a message indicating that we have closed the connection to the database.
38. Print the first created `Hero` object again after closing the connection to the database.
39. Print the second created `Hero` object again after closing the connection to the database.
40. Print the third created `Hero` object again after closing the connection to the database.