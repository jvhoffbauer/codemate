{"original_code": "@router.post(\"/access-token\", response_model=AccessTokenResponse)\nasync def login_access_token(\n    session: AsyncSession = Depends(deps.get_session),\n    form_data: OAuth2PasswordRequestForm = Depends(),\n):\n    \"\"\"OAuth2 compatible token, get an access token for future requests using username and password\"\"\"\n\n    result = await session.execute(select(User).where(User.email == form_data.username))\n    user = result.scalars().first()\n\n    if user is None:\n        raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n\n    if not security.verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n\n    return security.generate_access_token_response(str(user.id))"}