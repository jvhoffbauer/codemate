{"original_code": "    def _calculate_keys(\n        self: \"SQLModel\",\n        include: Optional[Mapping[Union[int, str], Any]],\n        exclude: Optional[Mapping[Union[int, str], Any]],\n        exclude_unset: bool,\n        update: Optional[Dict[str, Any]] = None,\n    ) -> Optional[AbstractSet[str]]:\n        if include is None and exclude is None and not exclude_unset:\n            # Original in Pydantic:\n            # return None\n            # Updated to not return SQLAlchemy attributes\n            # Do not include relationships as that would easily lead to infinite\n            # recursion, or traversing the whole database\n            return (\n                self.__fields__.keys()  # noqa\n            )  # | self.__sqlmodel_relationships__.keys()\n\n        keys: AbstractSet[str]\n        if exclude_unset:\n            keys = self.__fields_set__.copy()  # noqa\n        else:\n            # Original in Pydantic:\n            # keys = self.__dict__.keys()\n            # Updated to not return SQLAlchemy attributes\n            # Do not include relationships as that would easily lead to infinite\n            # recursion, or traversing the whole database\n            keys = (\n                self.__fields__.keys()  # noqa\n            )  # | self.__sqlmodel_relationships__.keys()\n        if include is not None:\n            keys &= include.keys()\n\n        if update:\n            keys -= update.keys()\n\n        if exclude:\n            keys -= {k for k, v in exclude.items() if ValueItems.is_true(v)}\n\n        return keys"}