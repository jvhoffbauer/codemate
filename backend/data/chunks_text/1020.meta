{"original_code": "def get_openapi_operation_parameters(\n    *,\n    all_route_params: Sequence[ModelField],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> List[Dict[str, Any]]:\n    parameters = []\n    for param in all_route_params:\n        field_info = param.field_info\n        field_info = cast(Param, field_info)\n        if not field_info.include_in_schema:\n            continue\n        param_schema = get_schema_from_model_field(\n            field=param,\n            schema_generator=schema_generator,\n            model_name_map=model_name_map,\n            field_mapping=field_mapping,\n            separate_input_output_schemas=separate_input_output_schemas,\n        )\n        parameter = {\n            \"name\": param.alias,\n            \"in\": field_info.in_.value,\n            \"required\": param.required,\n            \"schema\": param_schema,\n        }\n        if field_info.description:\n            parameter[\"description\"] = field_info.description\n        if field_info.openapi_examples:\n            parameter[\"examples\"] = jsonable_encoder(field_info.openapi_examples)\n        elif field_info.example != Undefined:\n            parameter[\"example\"] = jsonable_encoder(field_info.example)\n        if field_info.deprecated:\n            parameter[\"deprecated\"] = field_info.deprecated\n        parameters.append(parameter)\n    return parameters"}