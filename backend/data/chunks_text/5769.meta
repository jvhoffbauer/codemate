{"original_code": "    async def get_list_table(self, request: Request) -> TableCRUD:\n        headerToolbar = [\n            \"filter-toggler\",\n            \"reload\",\n            \"bulkActions\",\n            {\"type\": \"columns-toggler\", \"align\": \"right\", \"draggable\": True},\n            {\"type\": \"drag-toggler\", \"align\": \"right\"},\n            {\"type\": \"pagination\", \"align\": \"right\"},\n            {\n                \"type\": \"tpl\",\n                \"tpl\": _(\"SHOWING ${items|count} OF ${total} RESULT(S)\"),\n                \"className\": \"v-middle\",\n                \"align\": \"right\",\n            },\n        ]\n        headerToolbar.extend(await self.get_actions(request, flag=\"toolbar\"))\n        itemActions = []\n        if not self.display_item_action_as_column:\n            itemActions = await self.get_actions(request, flag=\"item\")\n        filter_form = None\n        if await self.has_filter_permission(request, None):\n            filter_form = await self.get_list_filter_form(request)\n        table = TableCRUD(\n            api=await self.get_list_table_api(request),\n            autoFillHeight=True,\n            headerToolbar=headerToolbar,\n            filterTogglable=True,\n            filterDefaultVisible=False,\n            filter=filter_form,\n            syncLocation=False,\n            keepItemSelectionOnPageChange=True,\n            perPage=self.list_per_page,\n            itemActions=itemActions,\n            bulkActions=await self.get_actions(request, flag=\"bulk\"),\n            footerToolbar=[\n                \"statistics\",\n                \"switch-per-page\",\n                \"pagination\",\n                \"load-more\",\n                \"export-csv\",\n                \"export-excel\",\n            ],\n            columns=await self.get_list_columns(request),\n            primaryField=self.pk_name,\n            quickSaveItemApi=f\"put:{self.router_path}/item/${self.pk_name}\",\n            defaultParams={k: v for k, v in request.query_params.items() if v},\n        )\n        # Append operation column\n        action_columns = await self._get_list_columns_for_actions(request)\n        table.columns.extend(action_columns)\n        # Append inline link model column\n        link_model_columns = await self._get_list_columns_for_link_model(request)\n        if link_model_columns:\n            table.columns.extend(link_model_columns)\n            table.footable = True\n        return table"}