{"original_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    values = {}\n    errors: List[Dict[str, Any]] = []\n    if required_params:\n        field = required_params[0]\n        field_info = field.field_info\n        embed = getattr(field_info, \"embed\", None)\n        field_alias_omitted = len(required_params) == 1 and not embed\n        if field_alias_omitted:\n            received_body = {field.alias: received_body}\n\n        for field in required_params:\n            loc: Tuple[str, ...]\n            if field_alias_omitted:\n                loc = (\"body\",)\n            else:\n                loc = (\"body\", field.alias)\n\n            value: Optional[Any] = None\n            if received_body is not None:\n                if (is_sequence_field(field)) and isinstance(received_body, FormData):\n                    value = received_body.getlist(field.alias)\n                else:\n                    try:\n                        value = received_body.get(field.alias)\n                    except AttributeError:\n                        errors.append(get_missing_field_error(loc))\n                        continue\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and is_sequence_field(field)\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    errors.append(get_missing_field_error(loc))\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and is_bytes_field(field)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                is_bytes_sequence_field(field)\n                and isinstance(field_info, params.File)\n                and value_is_sequence(value)\n            ):\n                # For types\n                assert isinstance(value, sequence_types)  # type: ignore[arg-type]\n                results: List[Union[bytes, str]] = []\n\n                async def process_fn(\n                    fn: Callable[[], Coroutine[Any, Any, Any]]\n                ) -> None:\n                    result = await fn()\n                    results.append(result)  # noqa: B023\n\n                async with anyio.create_task_group() as tg:\n                    for sub_value in value:\n                        tg.start_soon(process_fn, sub_value.read)\n                value = serialize_sequence_value(field=field, value=results)\n\n            v_, errors_ = field.validate(value, values, loc=loc)\n\n            if isinstance(errors_, list):\n                errors.extend(errors_)\n            elif errors_:\n                errors.append(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors"}