{"original_code": "def test_non_nullable_optional_field_with_no_default_set(clear_sqlmodel, caplog):\n    class Hero(SQLModel, table=True):\n        primary_key: Optional[int] = Field(\n            default=None,\n            primary_key=True,\n        )\n\n        optional_non_nullable_no_default: Optional[str] = Field(nullable=False)\n\n    engine = create_engine(\"sqlite://\", echo=True)\n    SQLModel.metadata.create_all(engine)\n\n    create_table_log = [\n        message for message in caplog.messages if \"CREATE TABLE hero\" in message\n    ][0]\n    assert \"primary_key INTEGER NOT NULL,\" in create_table_log\n    assert \"optional_non_nullable_no_default VARCHAR NOT NULL,\" in create_table_log\n\n    # We can create a hero with `None` set for the optional non-nullable field\n    hero = Hero(primary_key=123, optional_non_nullable_no_default=None)\n    # But we cannot commit it.\n    with Session(engine) as session:\n        session.add(hero)\n        with pytest.raises(IntegrityError):\n            session.commit()"}