{"original_code": "def test_MosaicTilerFactory_PixelSelectionParams():\n    \"\"\"Test MosaicTilerFactory factory with a customized default PixelSelectionMethod.\"\"\"\n    mosaic = MosaicTilerFactory(router_prefix=\"/mosaic\")\n    mosaic_highest = MosaicTilerFactory(\n        pixel_selection_dependency=lambda: PixelSelectionMethod.highest.method(),\n        router_prefix=\"/mosaic_highest\",\n    )\n\n    app = FastAPI()\n    app.include_router(mosaic.router, prefix=\"/mosaic\")\n    app.include_router(mosaic_highest.router, prefix=\"/mosaic_highest\")\n    client = TestClient(app)\n\n    with tmpmosaic() as mosaic_file:\n        response = client.get(\"/mosaic/tiles/7/37/45.npy\", params={\"url\": mosaic_file})\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"application/x-binary\"\n        npy_tile = numpy.load(BytesIO(response.content))\n        assert npy_tile.shape == (4, 256, 256)  # mask + data\n\n        response = client.get(\n            \"/mosaic_highest/tiles/7/37/45.npy\", params={\"url\": mosaic_file}\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"application/x-binary\"\n        npy_tile_highest = numpy.load(BytesIO(response.content))\n        assert npy_tile_highest.shape == (4, 256, 256)  # mask + data\n\n        assert (npy_tile != npy_tile_highest).any()"}