{"original_code": "    @dataclass\n    class ModelField:\n        field_info: FieldInfo\n        name: str\n        mode: Literal[\"validation\", \"serialization\"] = \"validation\"\n\n        @property\n        def alias(self) -> str:\n            a = self.field_info.alias\n            return a if a is not None else self.name\n\n        @property\n        def required(self) -> bool:\n            return self.field_info.is_required()\n\n        @property\n        def default(self) -> Any:\n            return self.get_default()\n\n        @property\n        def type_(self) -> Any:\n            return self.field_info.annotation\n\n        def __post_init__(self) -> None:\n            self._type_adapter: TypeAdapter[Any] = TypeAdapter(\n                Annotated[self.field_info.annotation, self.field_info]\n            )\n\n        def get_default(self) -> Any:\n            if self.field_info.is_required():\n                return Undefined\n            return self.field_info.get_default(call_default_factory=True)\n\n        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n        ) -> Tuple[Any, Union[List[Dict[str, Any]], None]]:\n            try:\n                return (\n                    self._type_adapter.validate_python(value, from_attributes=True),\n                    None,\n                )\n            except ValidationError as exc:\n                return None, _regenerate_error_with_loc(\n                    errors=exc.errors(), loc_prefix=loc\n                )\n\n        def serialize(\n            self,\n            value: Any,\n            *,\n            mode: Literal[\"json\", \"python\"] = \"json\",\n            include: Union[IncEx, None] = None,\n            exclude: Union[IncEx, None] = None,\n            by_alias: bool = True,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n        ) -> Any:\n            # What calls this code passes a value that already called\n            # self._type_adapter.validate_python(value)\n            return self._type_adapter.dump_python(\n                value,\n                mode=mode,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        def __hash__(self) -> int:\n            # Each ModelField is unique for our purposes, to allow making a dict from\n            # ModelField to its JSON Schema.\n            return id(self)"}