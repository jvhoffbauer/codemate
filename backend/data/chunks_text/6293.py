- This function is marked with `@pytest.mark.asyncio`, indicating that it's an asynchronous test case using PyTest's async support.
- It uses `@pytest.mark.parametrize` to run multiple tests with different input values for `name`, `content`, and optional keyword arguments (stored in a tuple called `IO_PARAMS`) passed from another part of the test suite.
- The function creates a temporary file path using `tmp_path` from `unittest.mock`. If the file doesn't exist yet, it saves the given `content` into it using `app.io.AIO.save()`, passing any additional keyword arguments provided by `IO_PARAMS`.
- After saving, the function loads the contents back using `app.io.AIO.load()` and compares them against the original `content`. If they match, the test passes; otherwise, it fails.