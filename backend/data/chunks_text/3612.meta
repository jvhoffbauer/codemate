{"original_code": "def test_router_events(state: State) -> None:\n    app = FastAPI()\n\n    @app.get(\"/\")\n    def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}\n\n    @app.on_event(\"startup\")\n    def app_startup() -> None:\n        state.app_startup = True\n\n    @app.on_event(\"shutdown\")\n    def app_shutdown() -> None:\n        state.app_shutdown = True\n\n    router = APIRouter()\n\n    @router.on_event(\"startup\")\n    def router_startup() -> None:\n        state.router_startup = True\n\n    @router.on_event(\"shutdown\")\n    def router_shutdown() -> None:\n        state.router_shutdown = True\n\n    sub_router = APIRouter()\n\n    @sub_router.on_event(\"startup\")\n    def sub_router_startup() -> None:\n        state.sub_router_startup = True\n\n    @sub_router.on_event(\"shutdown\")\n    def sub_router_shutdown() -> None:\n        state.sub_router_shutdown = True\n\n    router.include_router(sub_router)\n    app.include_router(router)\n\n    assert state.app_startup is False\n    assert state.router_startup is False\n    assert state.sub_router_startup is False\n    assert state.app_shutdown is False\n    assert state.router_shutdown is False\n    assert state.sub_router_shutdown is False\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.router_startup is True\n        assert state.sub_router_startup is True\n        assert state.app_shutdown is False\n        assert state.router_shutdown is False\n        assert state.sub_router_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n    assert state.app_startup is True\n    assert state.router_startup is True\n    assert state.sub_router_startup is True\n    assert state.app_shutdown is True\n    assert state.router_shutdown is True\n    assert state.sub_router_shutdown is True"}