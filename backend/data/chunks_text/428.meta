{"original_code": "def test_tutorial(clear_sqlmodel):\n    from docs_src.tutorial.indexes import tutorial002_py310 as mod\n\n    mod.sqlite_url = \"sqlite://\"\n    mod.engine = create_engine(mod.sqlite_url)\n    calls = []\n\n    new_print = get_testing_print_function(calls)\n\n    with patch(\"builtins.print\", new=new_print):\n        mod.main()\n    assert calls == [\n        [{\"name\": \"Tarantula\", \"secret_name\": \"Natalia Roman-on\", \"age\": 32, \"id\": 4}],\n        [{\"name\": \"Black Lion\", \"secret_name\": \"Trevor Challa\", \"age\": 35, \"id\": 5}],\n    ]\n\n    insp: Inspector = inspect(mod.engine)\n    indexes = insp.get_indexes(str(mod.Hero.__tablename__))\n    expected_indexes = [\n        {\n            \"name\": \"ix_hero_name\",\n            \"dialect_options\": {},\n            \"column_names\": [\"name\"],\n            \"unique\": 0,\n        },\n        {\n            \"name\": \"ix_hero_age\",\n            \"dialect_options\": {},\n            \"column_names\": [\"age\"],\n            \"unique\": 0,\n        },\n    ]\n    for index in expected_indexes:\n        assert index in indexes, \"This expected index should be in the indexes in DB\"\n        # Now that this index was checked, remove it from the list of indexes\n        indexes.pop(indexes.index(index))\n    assert len(indexes) == 0, \"The database should only have the expected indexes\""}