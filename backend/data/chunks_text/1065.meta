{"original_code": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: Union[str, None] = None,\n    category_id: Union[str, None] = None,\n    discussion_number: Union[int, None] = None,\n    discussion_id: Union[str, None] = None,\n    comment_id: Union[str, None] = None,\n    body: Union[str, None] = None,\n) -> Dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n    # some fields are only used by one query, but GraphQL allows unused variables, so\n    # keep them here for simplicity\n    variables = {\n        \"after\": after,\n        \"category_id\": category_id,\n        \"discussion_number\": discussion_number,\n        \"discussion_id\": discussion_id,\n        \"comment_id\": comment_id,\n        \"body\": body,\n    }\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(\n            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n        )\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return cast(Dict[str, Any], data)"}