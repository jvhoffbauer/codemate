{"original_code": "    def __init__(\n        self,\n        *,\n        path_params: Optional[List[ModelField]] = None,\n        query_params: Optional[List[ModelField]] = None,\n        header_params: Optional[List[ModelField]] = None,\n        cookie_params: Optional[List[ModelField]] = None,\n        body_params: Optional[List[ModelField]] = None,\n        dependencies: Optional[List[\"Dependant\"]] = None,\n        security_schemes: Optional[List[SecurityRequirement]] = None,\n        name: Optional[str] = None,\n        call: Optional[Callable[..., Any]] = None,\n        request_param_name: Optional[str] = None,\n        websocket_param_name: Optional[str] = None,\n        http_connection_param_name: Optional[str] = None,\n        response_param_name: Optional[str] = None,\n        background_tasks_param_name: Optional[str] = None,\n        security_scopes_param_name: Optional[str] = None,\n        security_scopes: Optional[List[str]] = None,\n        use_cache: bool = True,\n        path: Optional[str] = None,\n    ) -> None:\n        self.path_params = path_params or []\n        self.query_params = query_params or []\n        self.header_params = header_params or []\n        self.cookie_params = cookie_params or []\n        self.body_params = body_params or []\n        self.dependencies = dependencies or []\n        self.security_requirements = security_schemes or []\n        self.request_param_name = request_param_name\n        self.websocket_param_name = websocket_param_name\n        self.http_connection_param_name = http_connection_param_name\n        self.response_param_name = response_param_name\n        self.background_tasks_param_name = background_tasks_param_name\n        self.security_scopes = security_scopes\n        self.security_scopes_param_name = security_scopes_param_name\n        self.name = name\n        self.call = call\n        self.use_cache = use_cache\n        # Store the path to be able to re-generate a dependable from it in overrides\n        self.path = path\n        # Save the cache key at creation to optimize performance\n        self.cache_key = (self.call, tuple(sorted(set(self.security_scopes or []))))"}