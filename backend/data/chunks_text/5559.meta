{"original_code": "    def __init__(\n        self, model: Type[TableModelT] = None, fields: List[SqlaField] = None\n    ) -> None:\n        self.model = model or self.model\n        assert self.model, \"model is None\"\n        assert hasattr(\n            self.model, \"__table__\"\n        ), \"model must be has __table__ attribute.\"\n        self.pk_name: str = (\n            self.pk_name or self.model.__table__.primary_key.columns.keys()[0]\n        )\n        self.pk: InstrumentedAttribute = self.model.__dict__[self.pk_name]\n        self.parser = TableModelParser(self.model)\n        fields = fields or self.fields or self.model_insfields\n        exclude = self.parser.filter_insfield(self.exclude)\n        self.fields = [\n            sqlfield\n            for sqlfield in self.parser.filter_insfield(\n                fields + [self.pk], save_class=(Label,)\n            )\n            if sqlfield not in exclude\n        ]\n        assert self.fields, \"fields is None\"\n        self.list_filter = self.list_filter and self.list_filter.copy() or self.fields\n        self.link_models = self.link_models or {}\n        \"\"\"Make sure the value of link_models is an object attribute, not a class attribute.\"\"\""}