{"original_code": "    def get_modelfield(\n        self, field: Union[ModelField, SqlaInsAttr, Label], clone: bool = False\n    ) -> Optional[ModelFieldType]:\n        \"\"\"Get pydantic ModelField from sqlmodel field.\n        Args:\n            field:  ModelField, SQLModelField or Label\n            clone:  Whether to return a cloned of the original ModelField.\n\n        Returns:  pydantic ModelField or ModelFieldProxy.\n        \"\"\"\n        modelfield = None\n        update = {}\n        if isinstance(field, InstrumentedAttribute):\n            modelfield = self.get_table_model_fields(field.class_).get(field.key, None)\n            if not modelfield:  # Maybe it's a declared_attr or column_property.\n                return None\n            if field.class_.__table__ is not self.__table__:\n                update = {\n                    \"name\": self.get_name(field),\n                    \"alias\": self.get_alias(field),\n                }\n        elif isinstance(field, str) and field in self.__fields__:\n            modelfield = self.__fields__[field]\n        elif isinstance(field, ModelField):\n            modelfield = field\n        elif isinstance(field, Label):\n            modelfield = _get_label_modelfield(field)\n        if not modelfield:\n            return None\n        field_proxy = ModelFieldProxy(modelfield, update=update)\n        return field_proxy.cloned_field() if clone else field_proxy"}