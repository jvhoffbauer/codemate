{"original_code": "@pytest.mark.xfail\ndef test_withCustomRoute(monkeypatch):\n    \"\"\"Create App.\"\"\"\n    monkeypatch.setenv(\"GDAL_DISABLE_READDIR_ON_OPEN\", \"something\")\n\n    app = FastAPI()\n\n    env = {\"GDAL_DISABLE_READDIR_ON_OPEN\": \"FALSE\"}\n    with pytest.warns(DeprecationWarning):\n        route_class = apiroute_factory(env)\n    router = APIRouter(route_class=route_class)\n\n    def f(r):\n        return get_gdal_config(\"GDAL_DISABLE_READDIR_ON_OPEN\")\n\n    @router.get(\"/simple\")\n    def home():\n        \"\"\"Works and should return FALSE.\"\"\"\n        res = get_gdal_config(\"GDAL_DISABLE_READDIR_ON_OPEN\")\n        return {\"env\": res}\n\n    @router.get(\"/asimple\")\n    async def home1():\n        \"\"\"Works and should return FALSE.\"\"\"\n        res = get_gdal_config(\"GDAL_DISABLE_READDIR_ON_OPEN\")\n        return {\"env\": res}\n\n    @router.get(\"/future\")\n    def home2():\n        \"\"\"Doesn't work and should return the value from env.\"\"\"\n        with futures.ThreadPoolExecutor() as executor:\n            res = list(executor.map(f, range(1)))[0]\n        return {\"env\": res}\n\n    @router.get(\"/afuture\")\n    async def home3():\n        \"\"\"Works and should return FALSE.\"\"\"\n        with futures.ThreadPoolExecutor() as executor:\n            res = list(executor.map(f, range(1)))[0]\n        return {\"env\": res}\n\n    app.include_router(router)\n    client = TestClient(app)\n\n    response = client.get(\"/simple\")\n    assert response.json()[\"env\"] == \"FALSE\"\n\n    response = client.get(\"/asimple\")\n    assert response.json()[\"env\"] == \"FALSE\"\n\n    # confirm the Custom APIRoute class fix\n    response = client.get(\"/future\")\n    assert response.json()[\"env\"] == \"FALSE\"\n\n    response = client.get(\"/afuture\")\n    assert response.json()[\"env\"] == \"FALSE\""}