{"original_code": "    def info(self):\n        \"\"\"Register /info endpoint.\"\"\"\n\n        @self.router.get(\n            \"/info\",\n            response_model=MultiBaseInfo,\n            response_model_exclude_none=True,\n            response_class=JSONResponse,\n            responses={\n                200: {\n                    \"description\": \"Return dataset's basic info or the list of available assets.\"\n                }\n            },\n        )\n        def info(\n            src_path=Depends(self.path_dependency),\n            asset_params=Depends(self.assets_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return dataset's basic info or the list of available assets.\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(src_path, **reader_params) as src_dst:\n                    return src_dst.info(**asset_params)\n\n        @self.router.get(\n            \"/info.geojson\",\n            response_model=MultiBaseInfoGeoJSON,\n            response_model_exclude_none=True,\n            response_class=GeoJSONResponse,\n            responses={\n                200: {\n                    \"content\": {\"application/geo+json\": {}},\n                    \"description\": \"Return dataset's basic info as a GeoJSON feature.\",\n                }\n            },\n        )\n        def info_geojson(\n            src_path=Depends(self.path_dependency),\n            asset_params=Depends(self.assets_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return dataset's basic info as a GeoJSON feature.\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(src_path, **reader_params) as src_dst:\n                    return Feature(\n                        geometry=Polygon.from_bounds(*src_dst.geographic_bounds),\n                        properties={\n                            asset: asset_info\n                            for asset, asset_info in src_dst.info(\n                                **asset_params\n                            ).items()\n                        },\n                    )\n\n        @self.router.get(\n            \"/assets\",\n            response_model=List[str],\n            responses={200: {\"description\": \"Return a list of supported assets.\"}},\n        )\n        def available_assets(\n            src_path=Depends(self.path_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return a list of supported assets.\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(src_path, **reader_params) as src_dst:\n                    return src_dst.assets"}