{"original_code": "def test_requirements_txt():\n    \"\"\"Validate that requirements.txt and requirements-dev.txt\n    are up2date with Pipefile\"\"\"\n    temp_output_dir = \"tests/temp_output\"\n    req_test_file_path = \"{}/test-requirements.txt\".format(temp_output_dir)\n    req_dev_test_file_path = \"{}/test-requirements-dev.txt\".format(temp_output_dir)\n\n    return_code_0 = subprocess.call(\"mkdir -p {}\".format(temp_output_dir), shell=True)\n    return_code_1 = subprocess.call(\n        \"pipenv lock -r \\\n                                    > {}\".format(\n            req_test_file_path\n        ),\n        shell=True,\n    )\n\n    return_code_2 = subprocess.call(\n        \"pipenv lock -r --dev-only \\\n                                    > {}\".format(\n            req_dev_test_file_path\n        ),\n        shell=True,\n    )\n\n    with open(\"requirements.txt\") as file:\n        req_file = file.read()\n\n    with open(\"requirements-dev.txt\") as file:\n        req_dev_file = file.read()\n\n    with open(req_test_file_path) as file:\n        req_test_file = file.read()\n\n    with open(req_dev_test_file_path) as file:\n        req_dev_test_file = file.read()\n\n    return_code_z = subprocess.call(\"rm -rf {}\".format(temp_output_dir), shell=True)\n\n    assert req_file == req_test_file\n\n    assert req_dev_file == req_dev_test_file"}