{"original_code": "@pytest.fixture\ndef ep(ep_path):\n    _calls = defaultdict(list)\n\n    @contextlib.asynccontextmanager\n    async def mw_first(ctx: jsonrpc.JsonRpcContext):\n        nonlocal _calls\n        _calls[ctx.raw_request.get(\"id\")].append(\n            (\"mw_first\", \"enter\", ctx.raw_request, ctx.raw_response, sys.exc_info()[0])\n        )\n        try:\n            yield\n        finally:\n            _calls[ctx.raw_response.get(\"id\")].append(\n                (\n                    \"mw_first\",\n                    \"exit\",\n                    ctx.raw_request,\n                    ctx.raw_response,\n                    sys.exc_info()[0],\n                )\n            )\n\n    @contextlib.asynccontextmanager\n    async def mw_exception_enter(ctx: jsonrpc.JsonRpcContext):\n        nonlocal _calls\n        _calls[ctx.raw_request.get(\"id\")].append(\n            (\n                \"mw_exception_enter\",\n                \"enter\",\n                ctx.raw_request,\n                ctx.raw_response,\n                sys.exc_info()[0],\n            )\n        )\n        raise RuntimeError(unique_marker)\n        # noinspection PyUnreachableCode\n        try:\n            yield\n        finally:\n            _calls[ctx.raw_response.get(\"id\")].append(\n                (\n                    \"mw_exception_enter\",\n                    \"exit\",\n                    ctx.raw_request,\n                    ctx.raw_response,\n                    sys.exc_info()[0],\n                )\n            )\n\n    @contextlib.asynccontextmanager\n    async def mw_last(ctx: jsonrpc.JsonRpcContext):\n        nonlocal _calls\n        _calls[ctx.raw_request.get(\"id\")].append(\n            (\"mw_last\", \"enter\", ctx.raw_request, ctx.raw_response, sys.exc_info()[0])\n        )\n        try:\n            yield\n        finally:\n            _calls[ctx.raw_response.get(\"id\")].append(\n                (\n                    \"mw_last\",\n                    \"exit\",\n                    ctx.raw_request,\n                    ctx.raw_response,\n                    sys.exc_info()[0],\n                )\n            )\n\n    ep = jsonrpc.Entrypoint(\n        ep_path,\n        middlewares=[mw_first, mw_exception_enter, mw_last],\n    )\n\n    @ep.method()\n    def probe(\n        data: str = Body(..., examples=[\"123\"]),\n    ) -> str:\n        return data\n\n    ep.calls = _calls\n\n    return ep"}