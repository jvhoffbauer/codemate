{"original_code": "def annotation_outer_type(tp: Any) -> Any:\n    \"\"\"Get the base type of the annotation.\"\"\"\n    if tp is Ellipsis:\n        return Any\n    origin = get_origin(tp)\n    if origin is None:\n        return tp\n    elif is_union(origin) or origin is Annotated:\n        pass\n    elif origin in sequence_annotation_to_type:\n        return sequence_annotation_to_type[origin]\n    elif origin in {Dict, dict}:\n        return dict\n    elif lenient_issubclass(origin, BaseModel):\n        return origin\n    args = get_args(tp)\n    for arg in args:\n        if is_literal_type(tp):\n            arg = type(arg)\n        if is_none_type(arg):\n            continue\n        return annotation_outer_type(arg)\n    return tp"}