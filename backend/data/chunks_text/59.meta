{"original_code": "    def sqlmodel_validate(\n        cls: Type[_TSQLModel],\n        obj: Any,\n        *,\n        strict: Union[bool, None] = None,\n        from_attributes: Union[bool, None] = None,\n        context: Union[Dict[str, Any], None] = None,\n        update: Union[Dict[str, Any], None] = None,\n    ) -> _TSQLModel:\n        if not is_table_model_class(cls):\n            new_obj: _TSQLModel = cls.__new__(cls)\n        else:\n            # If table, create the new instance normally to make SQLAlchemy create\n            # the _sa_instance_state attribute\n            # The wrapper of this function should use with _partial_init()\n            with partial_init():\n                new_obj = cls()\n        # SQLModel Override to get class SQLAlchemy __dict__ attributes and\n        # set them back in after creating the object\n        old_dict = new_obj.__dict__.copy()\n        use_obj = obj\n        if isinstance(obj, dict) and update:\n            use_obj = {**obj, **update}\n        elif update:\n            use_obj = ObjectWithUpdateWrapper(obj=obj, update=update)\n        cls.__pydantic_validator__.validate_python(\n            use_obj,\n            strict=strict,\n            from_attributes=from_attributes,\n            context=context,\n            self_instance=new_obj,\n        )\n        # Capture fields set to restore it later\n        fields_set = new_obj.__pydantic_fields_set__.copy()\n        if not is_table_model_class(cls):\n            # If not table, normal Pydantic code, set __dict__\n            new_obj.__dict__ = {**old_dict, **new_obj.__dict__}\n        else:\n            # Do not set __dict__, instead use setattr to trigger SQLAlchemy\n            # instrumentation\n            for key, value in {**old_dict, **new_obj.__dict__}.items():\n                setattr(new_obj, key, value)\n        # Restore fields set\n        object.__setattr__(new_obj, \"__pydantic_fields_set__\", fields_set)\n        # Get and set any relationship objects\n        if is_table_model_class(cls):\n            for key in new_obj.__sqlmodel_relationships__:\n                value = getattr(use_obj, key, Undefined)\n                if value is not Undefined:\n                    setattr(new_obj, key, value)\n        return new_obj"}