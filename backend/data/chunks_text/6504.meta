{"original_code": "def test_component_name_isolated_by_their_path(pytester, api_package):\n    \"\"\"Test we can mix methods with same names in one openapi.json schema\"\"\"\n\n    pytester.makepyfile(\n        \"\"\"\nimport pytest\nimport fastapi_jsonrpc as jsonrpc\n\n\n# override conftest.py `app` fixture\n@pytest.fixture\ndef app():\n    from api.web import api_v1 as api_v1_web\n    from api.mobile import api_v1 as api_v1_mobile\n\n    app = jsonrpc.API()\n    app.bind_entrypoint(api_v1_web)\n    app.bind_entrypoint(api_v1_mobile)\n    return app\n\n\ndef test_no_collide(app_client):\n    resp = app_client.get('/openapi.json')\n    resp_json = resp.json()\n\n    paths = resp_json['paths']\n    schemas = resp_json['components']['schemas']\n\n    for path in (\n        '/api/v1/mobile/jsonrpc/probe',\n        '/api/v1/web/jsonrpc/probe',\n    ):\n        assert path in paths\n\n    # Response model the same and deduplicated\n    assert '_Response[probe]' in schemas\n\n    if '_Params[probe]' not in schemas:\n        for component_name in (\n            'api__mobile___Params[probe]',\n            'api__mobile___Request[probe]',\n            'api__web___Params[probe]',\n            'api__web___Request[probe]',\n        ):\n            assert component_name in schemas\n\"\"\"\n    )\n\n    # force reload module to drop component cache\n    # it's more efficient than use pytest.runpytest_subprocess()\n    sys.modules.pop(\"fastapi_jsonrpc\")\n\n    result = pytester.runpytest_inprocess()\n    result.assert_outcomes(passed=1)"}