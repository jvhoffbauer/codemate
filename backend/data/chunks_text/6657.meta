{"original_code": "def test_ep_exception(ep, method_request, assert_log_errors):\n    resp = method_request(\"probe\", {\"data\": \"one\"}, request_id=111)\n    assert resp == {\n        \"id\": 111,\n        \"jsonrpc\": \"2.0\",\n        \"error\": {\"code\": -32603, \"message\": \"Internal error\"},\n    }\n    assert ep.calls == {\n        111: [\n            (\n                \"mw_first\",\n                \"enter\",\n                {\n                    \"id\": 111,\n                    \"jsonrpc\": \"2.0\",\n                    \"method\": \"probe\",\n                    \"params\": {\"data\": \"one\"},\n                },\n                None,\n                None,\n            ),\n            (\n                \"mw_exception_enter\",\n                \"enter\",\n                {\n                    \"id\": 111,\n                    \"jsonrpc\": \"2.0\",\n                    \"method\": \"probe\",\n                    \"params\": {\"data\": \"one\"},\n                },\n                None,\n                None,\n            ),\n            (\n                \"mw_first\",\n                \"exit\",\n                {\n                    \"id\": 111,\n                    \"jsonrpc\": \"2.0\",\n                    \"method\": \"probe\",\n                    \"params\": {\"data\": \"one\"},\n                },\n                {\n                    \"id\": 111,\n                    \"jsonrpc\": \"2.0\",\n                    \"error\": {\"code\": -32603, \"message\": \"Internal error\"},\n                },\n                RuntimeError,\n            ),\n        ]\n    }\n\n    assert_log_errors(unique_marker, pytest.raises(RuntimeError))"}