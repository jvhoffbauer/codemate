{"original_code": "    def info(self):\n        \"\"\"Register /info endpoint\"\"\"\n\n        @self.router.get(\n            \"/info\",\n            response_model=mosaicInfo,\n            responses={200: {\"description\": \"Return info about the MosaicJSON\"}},\n        )\n        def info(\n            src_path=Depends(self.path_dependency),\n            backend_params=Depends(self.backend_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return basic info.\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(\n                    src_path,\n                    reader=self.dataset_reader,\n                    reader_options={**reader_params},\n                    **backend_params,\n                ) as src_dst:\n                    return src_dst.info()\n\n        @self.router.get(\n            \"/info.geojson\",\n            response_model=Feature[Polygon, mosaicInfo],\n            response_model_exclude_none=True,\n            response_class=GeoJSONResponse,\n            responses={\n                200: {\n                    \"content\": {\"application/geo+json\": {}},\n                    \"description\": \"Return mosaic's basic info as a GeoJSON feature.\",\n                }\n            },\n        )\n        def info_geojson(\n            src_path=Depends(self.path_dependency),\n            backend_params=Depends(self.backend_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return mosaic's basic info as a GeoJSON feature.\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(\n                    src_path,\n                    reader=self.dataset_reader,\n                    reader_options={**reader_params},\n                    **backend_params,\n                ) as src_dst:\n                    info = src_dst.info()\n                    return Feature(\n                        geometry=Polygon.from_bounds(*info.bounds), properties=info\n                    )"}