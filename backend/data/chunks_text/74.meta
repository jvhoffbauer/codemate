{"original_code": "    def sqlmodel_init(*, self: \"SQLModel\", data: Dict[str, Any]) -> None:\n        values, fields_set, validation_error = validate_model(self.__class__, data)\n        # Only raise errors if not a SQLModel model\n        if not is_table_model_class(self.__class__) and validation_error:  # noqa\n            raise validation_error\n        if not is_table_model_class(self.__class__):\n            object.__setattr__(self, \"__dict__\", values)\n        else:\n            # Do not set values as in Pydantic, pass them through setattr, so\n            # SQLAlchemy can handle them\n            for key, value in values.items():\n                setattr(self, key, value)\n        object.__setattr__(self, \"__fields_set__\", fields_set)\n        non_pydantic_keys = data.keys() - values.keys()\n\n        if is_table_model_class(self.__class__):\n            for key in non_pydantic_keys:\n                if key in self.__sqlmodel_relationships__:\n                    setattr(self, key, data[key])"}