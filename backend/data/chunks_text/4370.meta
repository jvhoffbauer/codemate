{"original_code": "def test_foo_no_needy(client: TestClient):\n    response = client.get(\"/items/foo?skip=a&limit=b\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                    \"url\": match_pydantic_error_url(\"missing\"),\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"a\",\n                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"b\",\n                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )"}