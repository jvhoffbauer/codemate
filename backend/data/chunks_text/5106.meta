{"original_code": "    def __init__(\n        self,\n        scope: core.Construct,\n        id: str,\n        cpu: Union[int, float] = 256,\n        memory: Union[int, float] = 512,\n        mincount: int = 1,\n        maxcount: int = 50,\n        permissions: Optional[List[iam.PolicyStatement]] = None,\n        environment: Optional[Dict] = None,\n        code_dir: str = \"./\",\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Define stack.\"\"\"\n        super().__init__(scope, id, *kwargs)\n\n        permissions = permissions or []\n        environment = environment or {}\n\n        vpc = ec2.Vpc(self, f\"{id}-vpc\", max_azs=2)\n\n        cluster = ecs.Cluster(self, f\"{id}-cluster\", vpc=vpc)\n\n        task_env = environment.copy()\n        task_env.update({\"LOG_LEVEL\": \"error\"})\n\n        # GUNICORN configuration\n        if settings.workers_per_core:\n            task_env.update({\"WORKERS_PER_CORE\": str(settings.workers_per_core)})\n        if settings.max_workers:\n            task_env.update({\"MAX_WORKERS\": str(settings.max_workers)})\n        if settings.web_concurrency:\n            task_env.update({\"WEB_CONCURRENCY\": str(settings.web_concurrency)})\n\n        fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(\n            self,\n            f\"{id}-service\",\n            cluster=cluster,\n            cpu=cpu,\n            memory_limit_mib=memory,\n            desired_count=mincount,\n            public_load_balancer=True,\n            listener_port=80,\n            task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageOptions(\n                image=ecs.ContainerImage.from_registry(\n                    f\"public.ecr.aws/developmentseed/titiler:{settings.image_version}\",\n                ),\n                container_port=80,\n                environment=task_env,\n            ),\n        )\n        fargate_service.target_group.configure_health_check(path=\"/healthz\")\n\n        for perm in permissions:\n            fargate_service.task_definition.task_role.add_to_policy(perm)\n\n        scalable_target = fargate_service.service.auto_scale_task_count(\n            min_capacity=mincount, max_capacity=maxcount\n        )\n\n        # https://github.com/awslabs/aws-rails-provisioner/blob/263782a4250ca1820082bfb059b163a0f2130d02/lib/aws-rails-provisioner/scaling.rb#L343-L387\n        scalable_target.scale_on_request_count(\n            \"RequestScaling\",\n            requests_per_target=50,\n            scale_in_cooldown=core.Duration.seconds(240),\n            scale_out_cooldown=core.Duration.seconds(30),\n            target_group=fargate_service.target_group,\n        )\n\n        # scalable_target.scale_on_cpu_utilization(\n        #     \"CpuScaling\", target_utilization_percent=70,\n        # )\n\n        fargate_service.service.connections.allow_from_any_ipv4(\n            port_range=ec2.Port(\n                protocol=ec2.Protocol.ALL,\n                string_representation=\"All port 80\",\n                from_port=80,\n            ),\n            description=\"Allows traffic on port 80 from ALB\",\n        )"}