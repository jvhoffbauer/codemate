{"original_code": "@router.post(\"/job/schedule\", summary=\"\u5f00\u59cbjob\u8c03\u5ea6\", name=\"\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\")\nasync def add_job_to_scheduler(\n    *,\n    seconds: int = Body(120, title=\"\u5faa\u73af\u95f4\u9694\u65f6\u95f4/\u79d2,\u9ed8\u8ba4120s\", embed=True),\n    job_id: str = Body(..., title=\"\u4efb\u52a1id\", embed=True),\n):\n    \"\"\"\n    \u7b80\u6613\u7684\u4efb\u52a1\u8c03\u5ea6\u6f14\u793a \u53ef\u81ea\u884c\u53c2\u8003\u6587\u6863 https://apscheduler.readthedocs.io/en/stable/\n    \u4e09\u79cd\u6a21\u5f0f\n    date: use when you want to run the job just once at a certain point of time\n    interval: use when you want to run the job at fixed intervals of time\n    cron: use when you want to run the job periodically at certain time(s) of day\n    :param seconds:\n    :param job_id:\n    :return:\n    \"\"\"\n    res = schedule.get_job(job_id=job_id)\n    if res:\n        return resp.fail(resp.InvalidRequest.set_msg(f\"{job_id} job already exists\"))\n\n    schedule_job = schedule.add_job(\n        demo_task,\n        \"interval\",\n        args=(job_id,),\n        seconds=seconds,  # \u5faa\u73af\u95f4\u9694\u65f6\u95f4 \u79d2\n        id=job_id,  # job ID\n        next_run_time=datetime.now(),  # \u7acb\u5373\u6267\u884c\n    )\n    return resp.ok(data={\"id\": schedule_job.id})"}