{"original_code": "    def route_create(self) -> Callable:\n        async def route(\n            request: Request,\n            data: Annotated[Union[List[self.schema_create], self.schema_create], Body()],  # type: ignore\n        ) -> BaseApiOut[Union[int, self.schema_model]]:  # type: ignore\n            if not await self.has_create_permission(request, data):\n                return self.error_no_router_permission(request)\n            if not isinstance(data, list):\n                data = [data]\n            try:\n                items = await self.create_items(request, data)\n            except Exception as error:\n                await self.db.async_rollback()\n                return self.error_execute_sql(request=request, error=error)\n            result = len(items)\n            if result == 1:  # if only one item, return the first item\n                result = await self.db.async_run_sync(\n                    lambda _: parse_obj_to_schema(\n                        items[0], self.schema_model, refresh=True\n                    )\n                )\n            return BaseApiOut(data=result)\n\n        return route"}