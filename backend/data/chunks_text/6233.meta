{"original_code": "@cached(cache=TTLCache(maxsize=1, ttl=1800))\nasync def get_locations():\n    \"\"\"\n    Retrieves county locations; locations are cached for 1 hour\n\n    :returns: The locations.\n    :rtype: dict\n    \"\"\"\n\n    data_id = \"csbs.locations\"\n    LOGGER.info(f\"{data_id} Requesting data...\")\n\n    # check shared cache\n    cache_results = await check_cache(data_id)\n    if cache_results:\n        LOGGER.info(f\"{data_id} using shared cache results\")\n        locations = cache_results\n    else:\n        LOGGER.info(f\"{data_id} shared cache empty\")\n        async with httputils.CLIENT_SESSION.get(BASE_URL) as response:\n            text = await response.text()\n\n        LOGGER.debug(f\"{data_id} Data received\")\n\n        data = list(csv.DictReader(text.splitlines()))\n        LOGGER.debug(f\"{data_id} CSV parsed\")\n\n        locations = []\n\n        for i, item in enumerate(data):\n            # General info.\n            state = item[\"State Name\"]\n            county = item[\"County Name\"]\n\n            # Ensure country is specified.\n            if county in {\"Unassigned\", \"Unknown\"}:\n                continue\n\n            # Date string without \"EDT\" at end.\n            last_update = \" \".join(item[\"Last Update\"].split(\" \")[0:2])\n\n            # Append to locations.\n            locations.append(\n                CSBSLocation(\n                    id=i,\n                    state=state,\n                    county=county,\n                    coordinates=Coordinates(item[\"Latitude\"], item[\"Longitude\"]),\n                    last_updated=datetime.strptime(\n                        last_update, \"%Y-%m-%d %H:%M\"\n                    ).isoformat()\n                    + \"Z\",\n                    confirmed=int(item[\"Confirmed\"] or 0),\n                    deaths=int(item[\"Death\"] or 0),\n                )\n            )\n\n        LOGGER.info(f\"{data_id} Data normalized\")\n        # save the results to distributed cache\n        # TODO: fix json serialization\n        try:\n            await load_cache(data_id, locations)\n        except TypeError as type_err:\n            LOGGER.error(type_err)\n\n    return locations"}