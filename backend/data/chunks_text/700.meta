{"original_code": "async def test_update_request_header(app):\n    \"\"\"\n    We expect the middleware to update the request header with the request ID\n    value.\n    \"\"\"\n\n    @app.get(\"/test\", status_code=200)\n    async def test_view(request: Request) -> dict:\n        logger.debug(\"Test view\")\n        return {\"correlation_id\": request.headers.get(\"X-Request-ID\")}\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        # Check for newly generated request ID in the request header if none\n        # was initially provided.\n        response = await client.get(\"test\")\n        assert is_valid_uuid4(response.json()[\"correlation_id\"])\n\n        # Check for newly generated request ID in the request header if it\n        # initially contains an invalid value.\n        response = await client.get(\"test\", headers={\"X-Request-ID\": \"invalid\"})\n        assert is_valid_uuid4(response.json()[\"correlation_id\"])\n\n        # Check for our request ID value in the request header.\n        correlation_id = uuid4().hex\n        response = await client.get(\"test\", headers={\"X-Request-ID\": correlation_id})\n        assert response.json()[\"correlation_id\"] == correlation_id"}