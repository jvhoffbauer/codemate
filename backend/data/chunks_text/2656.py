- Sends a GET request to `/items/valid` using Flask's built-in testing client (client) and asserts that it returns an HTTP status of 2xx (success). - Extracts the JSON response body from the server and checks if its structure matches the expected format for a valid item with name 'valid', price 1.0, and no owner IDs. ```
def test_invalid():
    response = client.get("/items/invalid")
    response.raise_for_status()
    assert response.json()["error"] == "Invalid item"
```

Bullet points:
- Sends a GET request to `/items/invalid` using Flask's built-in testing client (client) and asserts that it returns an HTTP status of 4xx (client error). - Extracts the JSON response body from the server and checks if its error message is equal to 'Invalid item'. ```
@app.route('/login')
def login():
    session['user'] = {'id': 123}
    return redirect(url_for('home'))
```

Bullet points:
- Defines a new route at `/login`. - Sets up a dictionary representing the current user in the Flask session ('session'). The user object has an 'id' field set to 123. - Redirects the browser to the home page after logging in by returning a redirect object generated by Flask's URL builder function (url_for()). ```
from flask import session, login_required

@app.route('/admin')
@login_required
def admin():
    # Accesses the currently logged-in user's information via the session dictionary. User = session['user']
    #...
    pass
```

Bullet points:
- Uses Flask's session management feature to restrict access to certain routes based on whether or not the user is authenticated. - Decorates the `admin` view function with the `login_required` decorator provided by Flask-Login. This ensures that the user must be logged in before they can access this resource. Inside the function, you can then safely assume that the user is already authenticated and retrieve their details from the session dictionary.