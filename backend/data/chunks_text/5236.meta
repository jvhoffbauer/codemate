{"original_code": "@dataclass\nclass AssetsBidxExprParams(DefaultDependency):\n    \"\"\"Assets, Expression and Asset's band Indexes parameters.\"\"\"\n\n    assets: Optional[List[str]] = Query(\n        None,\n        title=\"Asset names\",\n        description=\"Asset's names.\",\n        examples={\n            \"one-asset\": {\n                \"description\": \"Return results for asset `data`.\",\n                \"value\": [\"data\"],\n            },\n            \"multi-assets\": {\n                \"description\": \"Return results for assets `data` and `cog`.\",\n                \"value\": [\"data\", \"cog\"],\n            },\n        },\n    )\n    expression: Optional[str] = Query(\n        None,\n        title=\"Band Math expression\",\n        description=\"Band math expression between assets\",\n        examples={\n            \"simple\": {\n                \"description\": \"Return results of expression between assets.\",\n                \"value\": \"asset1_b1 + asset2_b1 / asset3_b1\",\n            },\n        },\n    )\n\n    asset_indexes: Optional[Sequence[str]] = Query(\n        None,\n        title=\"Per asset band indexes\",\n        description=\"Per asset band indexes (coma separated indexes)\",\n        alias=\"asset_bidx\",\n        examples={\n            \"one-asset\": {\n                \"description\": \"Return indexes 1,2,3 of asset `data`.\",\n                \"value\": [\"data|1,2,3\"],\n            },\n            \"multi-assets\": {\n                \"description\": \"Return indexes 1,2,3 of asset `data` and indexes 1 of asset `cog`\",\n                \"value\": [\"data|1,2,3\", \"cog|1\"],\n            },\n        },\n    )\n\n    asset_as_band: Optional[bool] = Query(\n        None,\n        title=\"Consider asset as a 1 band dataset\",\n        description=\"Asset as Band\",\n    )\n\n    def __post_init__(self):\n        \"\"\"Post Init.\"\"\"\n        if not self.assets and not self.expression:\n            raise MissingAssets(\n                \"assets must be defined either via expression or assets options.\"\n            )\n\n        if self.asset_indexes:\n            self.asset_indexes: Dict[str, Sequence[int]] = {  # type: ignore\n                idx.split(\"|\")[0]: list(map(int, idx.split(\"|\")[1].split(\",\")))\n                for idx in self.asset_indexes\n            }"}