{"original_code": "@patch(\"rio_tiler.io.rasterio.rasterio\")\n@patch(\"rio_tiler.io.stac.httpx\")\ndef test_preview(httpx, rio, app):\n    \"\"\"test preview endpoints.\"\"\"\n    httpx.get = mock_RequestGet\n    rio.open = mock_rasterio_open\n\n    # Missing Assets or Expression\n    response = app.get(\"/stac/preview?url=https://myurl.com/item.json\")\n    assert response.status_code == 400\n\n    response = app.get(\n        \"/stac/preview?url=https://myurl.com/item.json&assets=B01&rescale=0,1000&max_size=64\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"width\"] == 64\n    assert meta[\"height\"] == 64\n\n    response = app.get(\n        \"/stac/preview?url=https://myurl.com/item.json&assets=B01&rescale=0,1000&max_size=64&width=128&height=128\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"width\"] == 128\n    assert meta[\"height\"] == 128\n\n    response = app.get(\n        \"/stac/preview?url=https://myurl.com/item.json&expression=B01_b1&rescale=0,1000&max_size=64\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"width\"] == 64\n    assert meta[\"height\"] == 64"}