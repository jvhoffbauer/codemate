{"original_code": "    async def get_deny_fields(self, request: Request, action: str = None) -> Set[str]:\n        \"\"\"\u83b7\u53d6\u6ca1\u6709\u6743\u9650\u7684\u5b57\u6bb5\"\"\"\n        cache_key = f\"{self.unique_id}_exclude_fields\"\n        request_cache = request.scope.get(cache_key, {})\n        if action in request_cache:\n            return request_cache[action]\n        check_fields = {}\n        if action == \"list\":\n            check_fields = self.list_permission_fields.keys()\n        elif action == \"filter\":\n            check_fields = self.filter_permission_fields.keys()\n        elif action == \"create\":\n            check_fields = self.create_permission_fields.keys()\n        elif action == \"update\":\n            check_fields = self.update_permission_fields.keys()\n        elif action == \"read\":\n            check_fields = self.read_permission_fields.keys()\n        else:\n            pass\n        fields = {\n            field\n            for field in check_fields\n            if not await self.has_field_permission(request, field, action)\n        }\n        request_cache[action] = fields\n        if cache_key not in request.scope:\n            request.scope[cache_key] = request_cache\n        return fields"}