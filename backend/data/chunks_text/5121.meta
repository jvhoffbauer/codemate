{"original_code": "        def create_stac(\n            src_path: str = Depends(factory.path_dependency),\n            datetime: Optional[str] = Query(\n                None,\n                description=\"The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01).\",\n            ),\n            extensions: Optional[List[str]] = Query(\n                None, description=\"STAC extension URL the Item implements.\"\n            ),\n            collection: Optional[str] = Query(\n                None, description=\"The Collection ID that this item belongs to.\"\n            ),\n            collection_url: Optional[str] = Query(\n                None, description=\"Link to the STAC Collection.\"\n            ),\n            # properties: Optional[Dict] = Query(None, description=\"Additional properties to add in the item.\"),\n            id: Optional[str] = Query(\n                None,\n                description=\"Id to assign to the item (default to the source basename).\",\n            ),\n            asset_name: Optional[str] = Query(\n                \"data\", description=\"asset name for the source (default to 'data').\"\n            ),\n            asset_roles: Optional[List[str]] = Query(\n                None, description=\"list of asset's roles.\"\n            ),\n            asset_media_type: Literal[tuple(media)] = Query(  # type: ignore\n                \"auto\", description=\"Asset's media type\"\n            ),\n            asset_href: Optional[str] = Query(\n                None, description=\"Asset's URI (default to source's path)\"\n            ),\n            with_proj: bool = Query(\n                True, description=\"Add the `projection` extension and properties.\"\n            ),\n            with_raster: bool = Query(\n                True, description=\"Add the `raster` extension and properties.\"\n            ),\n            with_eo: bool = Query(\n                True, description=\"Add the `eo` extension and properties.\"\n            ),\n            max_size: Optional[int] = Query(\n                1024,\n                gt=0,\n                description=\"Limit array size from which to get the raster statistics.\",\n            ),\n        ):\n            \"\"\"Create STAC item.\"\"\"\n            properties = (\n                {}\n            )  # or properties = properties or {} if we add properties in Query\n\n            dt = None\n            if datetime:\n                if \"/\" in datetime:\n                    start_datetime, end_datetime = datetime.split(\"/\")\n                    properties[\"start_datetime\"] = datetime_to_str(\n                        str_to_datetime(start_datetime)\n                    )\n                    properties[\"end_datetime\"] = datetime_to_str(\n                        str_to_datetime(end_datetime)\n                    )\n                else:\n                    dt = str_to_datetime(datetime)\n\n            return create_stac_item(\n                src_path,\n                input_datetime=dt,\n                extensions=extensions,\n                collection=collection,\n                collection_url=collection_url,\n                properties=properties,\n                id=id,\n                asset_name=asset_name,\n                asset_roles=asset_roles,\n                asset_media_type=asset_media_type,\n                asset_href=asset_href or src_path,\n                with_proj=with_proj,\n                with_raster=with_raster,\n                with_eo=with_eo,\n                raster_max_size=max_size,\n            ).to_dict()"}