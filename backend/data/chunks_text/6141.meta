{"original_code": "async def test_update_fields_relationship(\n    app: FastAPI, async_client: AsyncClient, fake_articles, async_session, models\n):\n    class ArticleCrud(SqlalchemyCrud):\n        router_prefix = \"/article\"\n        update_exclude = {\"content\": {\"id\"}}\n        update_fields = [\n            models.Article.description,\n            PropertyField(\n                name=\"content\", type_=ArticleContentSchema\n            ),  # Relationship attribute\n        ]\n        read_fields = [\n            models.Article.title,\n            models.Article.description,\n            PropertyField(\n                name=\"content\", type_=ArticleContentSchema\n            ),  # Relationship attribute\n        ]\n\n    ins = ArticleCrud(models.Article, db.engine).register_crud()\n\n    app.include_router(ins.router)\n\n    # test schemas\n    assert \"id\" not in model_fields(ins.schema_update)\n    assert \"title\" not in model_fields(ins.schema_update)\n    assert \"description\" in model_fields(ins.schema_update)\n    assert \"content\" in model_fields(ins.schema_update)\n\n    # test api\n    res = await async_client.put(\n        \"/article/item/1\",\n        json={\n            \"title\": \"new_title\",\n            \"description\": \"new_description\",\n            \"content\": {\n                \"id\": 22,  # will be ignored by `update_exclude`\n                \"content\": \"new_content\",\n            },\n        },\n    )\n    assert res.json()[\"data\"] == 1\n\n    article = await async_session.get(models.Article, 1)\n    await async_session.refresh(article)\n\n    assert article.title != \"new_title\"\n    assert article.description == \"new_description\"\n\n    content = await async_session.get(models.ArticleContent, 1)\n    await async_session.refresh(content)\n    assert content.content == \"new_content\""}