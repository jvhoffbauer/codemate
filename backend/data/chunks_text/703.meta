{"original_code": "@pytest.mark.parametrize(\"value\", bad_uuids)\n@pytest.mark.parametrize(\"app\", [default_app, transformer_app, generator_app])\nasync def test_non_uuid_header(client, caplog, value, app):\n    \"\"\"\n    We expect the middleware to ignore our request ID and log a warning\n    when the request ID we pass doesn't correspond to the uuid4 format.\n    \"\"\"\n\n    @app.get(\"/test\", status_code=200)\n    async def test_view() -> dict:\n        logger.debug(\"Test view\")\n        return {\"test\": \"test\"}\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        response = await client.get(\"test\", headers={\"X-Request-ID\": value})\n        new_value = response.headers[\"X-Request-ID\"]\n        assert new_value != value\n        assert caplog.messages[0] == FAILED_VALIDATION_MESSAGE.replace(\"%s\", new_value)"}