- This function takes a type of SQLAlchemy `InspectTable` as input (stored in variable `table_model`) and returns an optional Pydantic model representing its columns' data types. - It first checks whether the given class already inherits from Pydantic's `BaseModel`, returning it directly if so. - If there's no direct inheritance but instead a custom attribute named `__pydantic_model__` that itself subclasses `BaseModel`, this one gets returned too. - Otherwise, it extracts all column names using `TableModelParser.get_table_model_insfields()`. - For each extracted column name, it creates a corresponding field object by calling `insfield_to_modelfield()`. - The resulting list of fields is filtered to remove any missing ones, then passed to `create_model_by_fields()` along with the table's name and `orm_mode=True` flag. - Finally, the newly created Pydantic model is assigned to the `__pydantic_model__` attribute of the original SQLAlchemy class, allowing future calls to `get_table_model_schema()` to avoid redundant work.