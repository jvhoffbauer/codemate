{"original_code": "@router.put(\"/{user_id}/\", response_model=UserOut, dependencies=[Depends(on_superuser)])\nasync def update_user(\n    user_id: int, user_in: UserUpdate, session: AsyncSession = Depends(get_session)\n):\n    user = await crud_user.get(session, id=user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=404,\n            detail=\"The user with this username does not exist in the system\",\n        )\n    try:\n        user = await crud_user.update(\n            session,\n            db_obj=user,\n            obj_in={\n                **user_in.dict(exclude={\"password\"}, exclude_none=True),\n                \"hashed_password\": get_password_hash(user_in.password),\n            },\n        )\n    except IntegrityError:\n        raise HTTPException(\n            status_code=409, detail=\"User with this username already exits\"\n        )\n    return user"}