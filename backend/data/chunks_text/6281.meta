{"original_code": "@pytest.mark.asyncio\n@pytest.mark.parametrize(\n    \"query_params,expected_status\",\n    [\n        ({\"source\": \"csbs\"}, 200),\n        ({\"source\": \"jhu\"}, 200),\n        ({\"source\": \"nyt\"}, 200),\n        ({\"timelines\": True}, 200),\n        ({\"timelines\": \"true\"}, 200),\n        ({\"timelines\": 1}, 200),\n        ({\"source\": \"jhu\", \"timelines\": True}, 200),\n        ({\"source\": \"nyt\", \"timelines\": True}, 200),\n        ({\"source\": \"csbs\", \"country_code\": \"US\"}, 200),\n        ({\"source\": \"nyt\", \"country_code\": \"US\"}, 200),\n        ({\"source\": \"jhu\", \"country_code\": \"US\"}, 404),\n    ],\n)\nasync def test_locations_status_code(\n    async_api_client, query_params, expected_status, mock_client_session\n):\n    response = await async_api_client.get(\"/v2/locations\", query_string=query_params)\n\n    print(f\"GET {response.url}\\n{response}\")\n    print(f\"\\tjson:\\n{pf(response.json())[:1000]}\\n\\t...\")\n    assert response.status_code == expected_status"}