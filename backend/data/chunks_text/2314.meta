{"original_code": "@needs_pydanticv2\ndef test_pydanticv2():\n    from pydantic import field_serializer\n\n    app = FastAPI()\n\n    @app.get(\"/fast_uuid\")\n    def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) != uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}\n\n    class SomeCustomClass(BaseModel):\n        model_config = {\"arbitrary_types_allowed\": True}\n\n        a_uuid: MyUuid\n\n        @field_serializer(\"a_uuid\")\n        def serialize_a_uuid(self, v):\n            return str(v)\n\n    @app.get(\"/get_custom_class\")\n    def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n\n    client = TestClient(app)\n\n    with client:\n        response_simple = client.get(\"/fast_uuid\")\n        response_pydantic = client.get(\"/get_custom_class\")\n\n    assert response_simple.json() == {\n        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n    }\n\n    assert response_pydantic.json() == {\n        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n    }"}