{"original_code": "    @classmethod\n    def build_resp_model(cls):\n        fields_definition = {\n            \"code\": (\n                int,\n                Field(cls.CODE, frozen=True, json_schema_extra={\"example\": cls.CODE}),\n            ),\n            \"message\": (\n                str,\n                Field(\n                    cls.MESSAGE, frozen=True, json_schema_extra={\"example\": cls.MESSAGE}\n                ),\n            ),\n        }\n\n        data_model = cls.get_data_model()\n        if data_model is not None:\n            data_model_default_value = ...\n            if not cls.data_required:\n                data_model = Optional[data_model]\n                data_model_default_value = None\n\n            fields_definition[\"data\"] = (data_model, data_model_default_value)\n\n        name = cls._component_name or cls.__name__\n\n        _JsonRpcErrorModel = create_model(\n            name,\n            __base__=(BaseModel,),\n            __module__=cls.__module__,\n            **fields_definition,\n        )\n        _JsonRpcErrorModel = component_name(name, cls.__module__)(_JsonRpcErrorModel)\n\n        @component_name(f\"_ErrorResponse[{name}]\", cls.__module__)\n        class _ErrorResponseModel(BaseModel):\n            jsonrpc: Literal[\"2.0\"] = Field(\"2.0\", json_schema_extra={\"example\": \"2.0\"})\n            id: Union[StrictStr, int] = Field(None, json_schema_extra={\"example\": 0})\n            error: _JsonRpcErrorModel\n\n            model_config = ConfigDict(extra=\"forbid\")\n\n        return _ErrorResponseModel"}