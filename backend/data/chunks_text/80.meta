{"original_code": "    @deprecated(\n        \"\"\"\n        \ud83d\udea8 You probably want to use `session.exec()` instead of `session.execute()`.\n\n        This is the original SQLAlchemy `session.execute()` method that returns objects\n        of type `Row`, and that you have to call `scalars()` to get the model objects.\n\n        For example:\n\n        ```Python\n        heroes = await session.execute(select(Hero)).scalars().all()\n        ```\n\n        instead you could use `exec()`:\n\n        ```Python\n        heroes = await session.exec(select(Hero)).all()\n        ```\n        \"\"\"\n    )\n    async def execute(  # type: ignore\n        self,\n        statement: _Executable,\n        params: Optional[_CoreAnyExecuteParams] = None,\n        *,\n        execution_options: OrmExecuteOptionsParameter = util.EMPTY_DICT,\n        bind_arguments: Optional[Dict[str, Any]] = None,\n        _parent_execute_state: Optional[Any] = None,\n        _add_event: Optional[Any] = None,\n    ) -> Result[Any]:\n        \"\"\"\n        \ud83d\udea8 You probably want to use `session.exec()` instead of `session.execute()`.\n\n        This is the original SQLAlchemy `session.execute()` method that returns objects\n        of type `Row`, and that you have to call `scalars()` to get the model objects.\n\n        For example:\n\n        ```Python\n        heroes = await session.execute(select(Hero)).scalars().all()\n        ```\n\n        instead you could use `exec()`:\n\n        ```Python\n        heroes = await session.exec(select(Hero)).all()\n        ```\n        \"\"\"\n        return await super().execute(\n            statement,\n            params=params,\n            execution_options=execution_options,\n            bind_arguments=bind_arguments,\n            _parent_execute_state=_parent_execute_state,\n            _add_event=_add_event,\n        )"}