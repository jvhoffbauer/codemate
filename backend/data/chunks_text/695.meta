{"original_code": "@pytest.mark.parametrize(\n    \"app\", [default_app, no_validator_or_transformer_app, generator_app]\n)\nasync def test_returned_response_headers(app):\n    \"\"\"\n    We expect our request id header to be returned back to us.\n    \"\"\"\n\n    @app.get(\"/test\", status_code=200)\n    async def test_view() -> dict:\n        logger.debug(\"Test view\")\n        return {\"test\": \"test\"}\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        # Check we get the right headers back\n        correlation_id = uuid4().hex\n        response = await client.get(\"test\", headers={\"X-Request-ID\": correlation_id})\n        assert response.headers[\"X-Request-ID\"] == correlation_id\n\n        # And do it one more time, jic\n        second_correlation_id = uuid4().hex\n        second_response = await client.get(\n            \"test\", headers={\"X-Request-ID\": second_correlation_id}\n        )\n        assert second_response.headers[\"X-Request-ID\"] == second_correlation_id\n\n        # Then try without specifying a request id\n        third_response = await client.get(\"test\")\n        assert third_response.headers[\"X-Request-ID\"] not in [\n            correlation_id,\n            second_correlation_id,\n        ]"}