{"original_code": "@pytest.fixture\ndef ep(ep_path):\n    _calls = defaultdict(list)\n\n    ep_middleware_var = contextvars.ContextVar(\"ep_middleware\")\n    method_middleware_var = contextvars.ContextVar(\"method_middleware\")\n\n    @contextlib.asynccontextmanager\n    async def ep_handle_exception(_ctx: jsonrpc.JsonRpcContext):\n        try:\n            yield\n        except RuntimeError as exc:\n            logging.exception(str(exc), exc_info=exc)\n            raise _TestError(unique_marker2)\n\n    @contextlib.asynccontextmanager\n    async def ep_middleware(ctx: jsonrpc.JsonRpcContext):\n        nonlocal _calls\n        ep_middleware_var.set(\"ep_middleware-value\")\n        _calls[ctx.raw_request.get(\"id\")].append(\n            (\n                \"ep_middleware\",\n                \"enter\",\n                ctx.raw_request,\n                ctx.raw_response,\n                sys.exc_info()[0],\n            )\n        )\n        try:\n            yield\n        finally:\n            _calls[ctx.raw_response.get(\"id\")].append(\n                (\n                    \"ep_middleware\",\n                    \"exit\",\n                    ctx.raw_request,\n                    ctx.raw_response,\n                    sys.exc_info()[0],\n                )\n            )\n\n    @contextlib.asynccontextmanager\n    async def method_middleware(ctx):\n        nonlocal _calls\n        method_middleware_var.set(\"method_middleware-value\")\n        _calls[ctx.raw_request.get(\"id\")].append(\n            (\n                \"method_middleware\",\n                \"enter\",\n                ctx.raw_request,\n                ctx.raw_response,\n                sys.exc_info()[0],\n            )\n        )\n        try:\n            yield\n        finally:\n            _calls[ctx.raw_response.get(\"id\")].append(\n                (\n                    \"method_middleware\",\n                    \"exit\",\n                    ctx.raw_request,\n                    ctx.raw_response,\n                    sys.exc_info()[0],\n                )\n            )\n\n    ep = jsonrpc.Entrypoint(\n        ep_path,\n        middlewares=[ep_handle_exception, ep_middleware],\n    )\n\n    @ep.method(middlewares=[method_middleware])\n    def probe(\n        data: str = Body(..., examples=[\"123\"]),\n    ) -> str:\n        return data\n\n    @ep.method(middlewares=[method_middleware])\n    def probe_error() -> str:\n        raise RuntimeError(unique_marker)\n\n    @ep.method(middlewares=[method_middleware])\n    def probe_context_vars() -> Tuple[str, str]:\n        return ep_middleware_var.get(), method_middleware_var.get()\n\n    ep.calls = _calls\n\n    return ep"}