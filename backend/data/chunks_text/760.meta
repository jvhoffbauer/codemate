{"original_code": "    def extract_entities(self, records: List[Dict[str, str]]):\n        \"\"\"Apply the pre-trained model to a batch of records\n\n        records (list): The list of \"document\" dictionaries each with an\n            `id` and `text` property\n\n        RETURNS (list): List of responses containing the id of\n            the correlating document and a list of entities.\n        \"\"\"\n        ids = (doc[self.input_id_col] for doc in records)\n        texts = (doc[self.input_text_col] for doc in records)\n\n        res = []\n\n        for doc_id, spacy_doc in zip(ids, self.nlp.pipe(texts)):\n            entities = {}\n            for ent in spacy_doc.ents:\n                ent_id = ent.kb_id\n                if not ent_id:\n                    ent_id = ent.ent_id\n                if not ent_id:\n                    ent_id = self._name_to_id(ent.text)\n\n                if ent_id not in entities:\n                    if ent.text.lower() == ent.text:\n                        ent_name = ent.text.capitalize()\n                    else:\n                        ent_name = ent.text\n                    entities[ent_id] = {\n                        \"name\": ent_name,\n                        \"label\": ent.label_,\n                        \"matches\": [],\n                    }\n                entities[ent_id][\"matches\"].append(\n                    {\"start\": ent.start_char, \"end\": ent.end_char, \"text\": ent.text}\n                )\n\n            res.append({\"id\": doc_id, \"entities\": list(entities.values())})\n        return res"}