{"original_code": "async def test_schema_update_relationship(\n    app: FastAPI, async_client: AsyncClient, fake_articles, async_session, models\n):\n    content_schema = TableModelParser.get_table_model_schema(models.ArticleContent)\n\n    class ArticleUpdate(BaseModel):\n        title: str = None\n        description: str = None\n        content: Optional[content_schema] = None  # Relationship\n\n    class ArticleCrud(SqlalchemyCrud):\n        router_prefix = \"/article\"\n        update_exclude = {\"content\": {\"id\"}}\n        schema_update = ArticleUpdate\n\n    ins = ArticleCrud(models.Article, db.engine).register_crud()\n\n    app.include_router(ins.router)\n\n    # test schemas\n    openapi = app.openapi()\n    schemas = openapi[\"components\"][\"schemas\"]\n\n    assert \"content\" in schemas[\"ArticleUpdate\"][\"properties\"]\n    # assert schemas[\"ArticleUpdate\"][\"properties\"][\"content\"][\"$ref\"] == \"#/components/schemas/\" + content_schema.__name__\n\n    # test api\n    res = await async_client.put(\"/article/item/1\", json={\"title\": \"new_title\"})\n    assert res.json()[\"data\"] == 1\n    article = await async_session.get(models.Article, 1, with_for_update=True)\n    await async_session.refresh(article)\n    assert article.title == \"new_title\"\n\n    res = await async_client.put(\n        \"/article/item/1\",\n        json={\n            \"content\": {\"id\": 2, \"content\": \"new_content\"}\n        },  # will be ignored by `update_exclude`\n    )\n    assert res.json()[\"data\"] == 1\n    content = await async_session.get(models.ArticleContent, 1, with_for_update=True)\n    await async_session.refresh(content)\n    assert content.content == \"new_content\""}