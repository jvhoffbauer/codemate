{"original_code": "@needs_py39\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response"}