{"original_code": "def test_tile(app):\n    \"\"\"Test GET /mosaicjson/tiles endpoint\"\"\"\n    mosaicjson = read_json_fixture(MOSAICJSON_FILE)\n    bounds = mosaicjson[\"bounds\"]\n    tile = mercantile.tile(*mosaicjson[\"center\"])\n    partial_tile = mercantile.tile(bounds[0], bounds[1], mosaicjson[\"minzoom\"])\n\n    with patch.object(FileBackend, \"_read\", mosaic_read_factory(MOSAICJSON_FILE)):\n        # full tile\n        response = app.get(\n            f\"/mosaicjson/tiles/{tile.z}/{tile.x}/{tile.y}\",\n            params={\"url\": MOSAICJSON_FILE},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/png\"\n        meta = parse_img(response.content)\n        assert meta[\"width\"] == meta[\"height\"] == 256\n\n        response = app.get(\n            f\"/mosaicjson/tiles/{tile.z}/{tile.x}/{tile.y}@2x\",\n            params={\"url\": MOSAICJSON_FILE},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/png\"\n        meta = parse_img(response.content)\n        assert meta[\"width\"] == meta[\"height\"] == 512\n\n        response = app.get(\n            f\"/mosaicjson/tiles/{tile.z}/{tile.x}/{tile.y}.tif\",\n            params={\"url\": MOSAICJSON_FILE},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/tiff; application=geotiff\"\n        meta = parse_img(response.content)\n        assert meta[\"width\"] == meta[\"height\"] == 256\n        assert meta[\"crs\"] == 3857\n\n        response = app.get(\n            f\"/mosaicjson/tiles/{tile.z}/{tile.x}/{tile.y}@2x.tif\",\n            params={\"url\": MOSAICJSON_FILE, \"nodata\": 0, \"bidx\": 1},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/tiff; application=geotiff\"\n        meta = parse_img(response.content)\n        assert meta[\"dtype\"] == \"uint16\"\n        assert meta[\"count\"] == 2\n        assert meta[\"width\"] == 512\n        assert meta[\"height\"] == 512\n\n        response = app.get(\n            f\"/mosaicjson/tiles/{tile.z}/{tile.x}/{tile.y}@2x.jpg\",\n            params={\n                \"url\": MOSAICJSON_FILE,\n                \"rescale\": \"0,1000\",\n                \"colormap_name\": \"viridis\",\n                \"bidx\": 1,\n            },\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/jpg\"\n\n        # partial tile\n        response = app.get(\n            f\"/mosaicjson/tiles/{partial_tile.z}/{partial_tile.x}/{partial_tile.y}\",\n            params={\"url\": MOSAICJSON_FILE},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/png\"\n\n        response = app.get(\n            f\"/mosaicjson/tiles/{partial_tile.z}/{partial_tile.x}/{partial_tile.y}.tif\",\n            params={\"url\": MOSAICJSON_FILE, \"resampling\": \"bilinear\"},\n        )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"image/tiff; application=geotiff\""}