{"original_code": "async def test_schema_filter(\n    app: FastAPI, async_client: AsyncClient, fake_users, models\n):\n    class UserFilter(BaseModel):\n        id: int = None\n        username: str = None\n\n    class UserCrud(SqlalchemyCrud):\n        router_prefix = \"/user\"\n        schema_filter = UserFilter\n\n    ins = UserCrud(models.User, db.engine).register_crud()\n\n    app.include_router(ins.router)\n\n    # test schemas\n    openapi = app.openapi()\n    schemas = openapi[\"components\"][\"schemas\"]\n    assert \"password\" not in schemas[\"UserFilter\"][\"properties\"]\n    assert \"username\" in schemas[\"UserFilter\"][\"properties\"]\n\n    # test api\n    res = await async_client.post(\"/user/list\", json={\"id\": 1})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"id\"] == 1\n\n    res = await async_client.post(\"/user/list\", json={\"username\": \"User_1\"})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"username\"] == \"User_1\"\n\n    res = await async_client.post(\"/user/list\", json={\"password\": \"new_password\"})\n    items = res.json()[\"data\"][\"items\"]\n    assert items"}