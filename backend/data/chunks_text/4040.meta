{"original_code": "def test_wrong_headers(client: TestClient):\n    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )"}