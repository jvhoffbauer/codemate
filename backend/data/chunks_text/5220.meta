{"original_code": "@dataclass\nclass AlgorithmFactory:\n    \"\"\"Algorithm endpoints Factory.\"\"\"\n\n    # Supported algorithm\n    supported_algorithm: Algorithms = available_algorithms\n\n    # FastAPI router\n    router: APIRouter = field(default_factory=APIRouter)\n\n    def __post_init__(self):\n        \"\"\"Post Init: register routes\"\"\"\n\n        def metadata(algorithm: BaseAlgorithm) -> AlgorithmMetadata:\n            \"\"\"Algorithm Metadata\"\"\"\n            props = algorithm.schema()[\"properties\"]\n\n            # Inputs Metadata\n            ins = {\n                k.replace(\"input_\", \"\"): v[\"default\"]\n                for k, v in props.items()\n                if k.startswith(\"input_\") and \"default\" in v\n            }\n\n            # Output Metadata\n            outs = {\n                k.replace(\"output_\", \"\"): v[\"default\"]\n                for k, v in props.items()\n                if k.startswith(\"output_\") and \"default\" in v\n            }\n\n            # Algorithm Parameters\n            params = {\n                k: v\n                for k, v in props.items()\n                if not k.startswith(\"input_\") and not k.startswith(\"output_\")\n            }\n            return AlgorithmMetadata(inputs=ins, outputs=outs, parameters=params)\n\n        @self.router.get(\n            \"/algorithms\",\n            response_model=Dict[str, AlgorithmMetadata],\n            summary=\"Retrieve the list of available Algorithms.\",\n            operation_id=\"getAlgorithms\",\n        )\n        def available_algorithms(request: Request):\n            \"\"\"Retrieve the list of available Algorithms.\"\"\"\n            return {k: metadata(v) for k, v in self.supported_algorithm.data.items()}\n\n        @self.router.get(\n            \"/algorithms/{algorithmId}\",\n            response_model=AlgorithmMetadata,\n            summary=\"Retrieve the metadata of the specified algorithm.\",\n            operation_id=\"getAlgorithm\",\n        )\n        def algorithm_metadata(\n            algorithm: Literal[tuple(self.supported_algorithm.list())] = Path(\n                ..., description=\"Algorithm name\", alias=\"algorithmId\"\n            ),\n        ):\n            \"\"\"Retrieve the metadata of the specified algorithm.\"\"\"\n            return metadata(self.supported_algorithm.get(algorithm))"}