{"original_code": "async def test_list_filter_relationship(\n    app: FastAPI, async_client: AsyncClient, fake_articles, models\n):\n    class ArticleCrud(SqlalchemyCrud):\n        router_prefix = \"/article\"\n        list_filter = [\n            \"id\",\n            models.Article.title,\n            models.User.username,\n            models.User.password.label(\"pwd\"),\n            LabelField(\n                label=models.User.password.label(\"pwd2\"),\n                field=Field(None, title=\"pwd_title\"),\n            ),\n        ]\n\n        async def get_select(self, request: Request) -> Select:\n            sel = await super().get_select(request)\n            return sel.outerjoin(models.User, models.User.id == models.Article.user_id)\n\n    ins = ArticleCrud(models.Article, db.engine).register_crud()\n\n    app.include_router(ins.router)\n    # test schemas\n    assert \"title\" in model_fields(ins.schema_filter)\n    assert \"user_username\" in model_fields(ins.schema_filter)\n    assert \"pwd\" in model_fields(ins.schema_filter)\n    assert \"pwd2\" in model_fields(ins.schema_filter)\n    assert model_fields(ins.schema_filter)[\"pwd2\"].field_info.title == \"pwd_title\"\n    assert \"description\" not in model_fields(ins.schema_filter)\n    # test openapi\n    openapi = app.openapi()\n    schemas = openapi[\"components\"][\"schemas\"]\n\n    assert \"title\" in schemas[\"ArticleCrudFilter\"][\"properties\"]\n\n    assert \"user__username\" in schemas[\"ArticleCrudFilter\"][\"properties\"]\n    assert \"pwd\" in schemas[\"ArticleCrudFilter\"][\"properties\"]\n    assert \"description\" not in schemas[\"ArticleCrudFilter\"][\"properties\"]\n\n    # test api\n    res = await async_client.post(\"/article/list\", json={\"id\": 2})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"id\"] == 2\n    assert \"user__username\" not in items[0]\n    assert \"pwd\" not in items[0]\n\n    res = await async_client.post(\"/article/list\", json={\"user__username\": \"User_2\"})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"id\"] == 2\n\n    res = await async_client.post(\"/article/list\", json={\"pwd\": \"password_2\"})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"id\"] == 2\n\n    res = await async_client.post(\"/article/list\", json={\"pwd2\": \"password_2\"})\n    items = res.json()[\"data\"][\"items\"]\n    assert items[0][\"id\"] == 2"}