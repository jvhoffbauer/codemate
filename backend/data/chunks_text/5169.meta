{"original_code": "    def tile(self):  # noqa: C901\n        \"\"\"Register /tiles endpoint.\"\"\"\n\n        @self.router.get(r\"/tiles/{z}/{x}/{y}\", **img_endpoint_params)\n        @self.router.get(r\"/tiles/{z}/{x}/{y}.{format}\", **img_endpoint_params)\n        @self.router.get(r\"/tiles/{z}/{x}/{y}@{scale}x\", **img_endpoint_params)\n        @self.router.get(r\"/tiles/{z}/{x}/{y}@{scale}x.{format}\", **img_endpoint_params)\n        @self.router.get(r\"/tiles/{TileMatrixSetId}/{z}/{x}/{y}\", **img_endpoint_params)\n        @self.router.get(\n            r\"/tiles/{TileMatrixSetId}/{z}/{x}/{y}.{format}\", **img_endpoint_params\n        )\n        @self.router.get(\n            r\"/tiles/{TileMatrixSetId}/{z}/{x}/{y}@{scale}x\", **img_endpoint_params\n        )\n        @self.router.get(\n            r\"/tiles/{TileMatrixSetId}/{z}/{x}/{y}@{scale}x.{format}\",\n            **img_endpoint_params,\n        )\n        def tile(\n            z: int = Path(..., ge=0, le=30, description=\"TMS tiles's zoom level\"),\n            x: int = Path(..., description=\"TMS tiles's column\"),\n            y: int = Path(..., description=\"TMS tiles's row\"),\n            TileMatrixSetId: Literal[tuple(self.supported_tms.list())] = Query(\n                self.default_tms,\n                description=f\"TileMatrixSet Name (default: '{self.default_tms}')\",\n            ),\n            scale: int = Query(\n                1, gt=0, lt=4, description=\"Tile size scale. 1=256x256, 2=512x512...\"\n            ),\n            format: ImageType = Query(\n                None, description=\"Output image type. Default is auto.\"\n            ),\n            src_path=Depends(self.path_dependency),\n            layer_params=Depends(self.layer_dependency),\n            dataset_params=Depends(self.dataset_dependency),\n            buffer: Optional[float] = Query(\n                None,\n                gt=0,\n                title=\"Tile buffer.\",\n                description=\"Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).\",\n            ),\n            post_process=Depends(self.process_dependency),\n            rescale: Optional[List[Tuple[float, ...]]] = Depends(RescalingParams),\n            color_formula: Optional[str] = Query(\n                None,\n                title=\"Color Formula\",\n                description=\"rio-color formula (info: https://github.com/mapbox/rio-color)\",\n            ),\n            colormap=Depends(self.colormap_dependency),\n            render_params=Depends(self.render_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Create map tile from a dataset.\"\"\"\n            tms = self.supported_tms.get(TileMatrixSetId)\n            with rasterio.Env(**env):\n                with self.reader(src_path, tms=tms, **reader_params) as src_dst:\n                    image = src_dst.tile(\n                        x,\n                        y,\n                        z,\n                        tilesize=scale * 256,\n                        buffer=buffer,\n                        **layer_params,\n                        **dataset_params,\n                    )\n                    dst_colormap = getattr(src_dst, \"colormap\", None)\n\n            if post_process:\n                image = post_process(image)\n\n            if rescale:\n                image.rescale(rescale)\n\n            if color_formula:\n                image.apply_color_formula(color_formula)\n\n            if cmap := colormap or dst_colormap:\n                image = image.apply_colormap(cmap)\n\n            if not format:\n                format = ImageType.jpeg if image.mask.all() else ImageType.png\n\n            content = image.render(\n                img_format=format.driver,\n                **format.profile,\n                **render_params,\n            )\n\n            return Response(content, media_type=format.mediatype)"}