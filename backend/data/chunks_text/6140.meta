{"original_code": "async def test_read_fields_relationship(\n    app: FastAPI, async_client: AsyncClient, fake_articles, fake_article_tags, models\n):\n    class ArticleCrud(SqlalchemyCrud):\n        router_prefix = \"/article\"\n        read_fields = [\n            models.Article.title,\n            models.Article.description,\n            PropertyField(\n                name=\"category\", type_=CategorySchema\n            ),  # Relationship attribute\n            # Article.category,  # Relationship todo support\n            PropertyField(name=\"content_text\", type_=str),  # property attribute\n            PropertyField(name=\"tags\", type_=List[TagSchema]),  # property attribute\n        ]\n\n    ins = ArticleCrud(models.Article, db.engine).register_crud()\n\n    app.include_router(ins.router)\n\n    # test schemas\n    assert \"id\" not in model_fields(ins.schema_read)\n    assert \"title\" in model_fields(ins.schema_read)\n    assert \"description\" in model_fields(ins.schema_read)\n    assert \"category\" in model_fields(ins.schema_read)\n    assert \"tags\" in model_fields(ins.schema_read)\n    # test api\n    res = await async_client.get(\"/article/item/1\")\n    items = res.json()[\"data\"]\n    assert \"id\" not in items\n    assert \"category\" in items\n    assert items[\"category\"][\"name\"] == \"Category_1\"\n    assert \"content_text\" in items\n    assert items[\"tags\"][0][\"name\"] == \"Tag_1\""}