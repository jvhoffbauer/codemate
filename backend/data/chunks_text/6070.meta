{"original_code": "async def test_schema_read_relationship(\n    app: FastAPI, async_client: AsyncClient, fake_articles, fake_article_tags, models\n):\n    category_schema = TableModelParser.get_table_model_schema(models.Category)\n    content_schema = TableModelParser.get_table_model_schema(models.ArticleContent)\n    user_schema = TableModelParser.get_table_model_schema(models.User)\n    tag_schema = TableModelParser.get_table_model_schema(models.Tag)\n\n    class ArticleRead(ORMModelMixin):\n        id: int\n        title: str\n        description: str\n        category: Optional[category_schema] = None  # Relationship\n        content: Optional[content_schema] = None  # Relationship\n        user: Optional[user_schema] = None  # Relationship\n        tags: List[tag_schema] = []  # Relationship\n\n    class ArticleCrud(SqlalchemyCrud):\n        router_prefix = \"/article\"\n        schema_read = ArticleRead\n\n    ins = ArticleCrud(models.Article, db.engine).register_crud()\n\n    app.include_router(ins.router)\n\n    # test schemas\n    openapi = app.openapi()\n    schemas = openapi[\"components\"][\"schemas\"]\n    assert \"category\" in schemas[\"ArticleRead\"][\"properties\"]\n    # assert schemas[\"ArticleRead\"][\"properties\"][\"category\"][\"$ref\"] == \"#/components/schemas/\" + category_schema.__name__\n    assert \"content\" in schemas[\"ArticleRead\"][\"properties\"]\n    assert \"user\" in schemas[\"ArticleRead\"][\"properties\"]\n    assert \"tags\" in schemas[\"ArticleRead\"][\"properties\"]\n\n    # test api\n    res = await async_client.get(\"/article/item/1\")\n    items = res.json()[\"data\"]\n    assert items[\"id\"] == 1\n    assert \"category\" in items\n    assert \"content\" in items\n    assert \"user\" in items\n    assert items[\"category\"][\"id\"] == 1\n    assert items[\"content\"][\"id\"] == 1\n    assert items[\"user\"][\"id\"] == 1\n    assert items[\"tags\"][0][\"id\"] == 1"}