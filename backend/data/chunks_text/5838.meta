{"original_code": "    def get_field_amis_form_item_type(\n        self, type_: Any, is_filter: bool, required: bool = False\n    ) -> dict:\n        \"\"\"Get amis form item type from pydantic model field type.\"\"\"\n        kwargs = {}\n        type_ = annotation_outer_type(type_)\n        if type_ in {str, Any}:\n            kwargs[\"type\"] = \"input-text\"\n        elif issubclass(type_, Enum):\n            items = (\n                type_.choices\n                if issubclass(type_, Choices)\n                else [(m.value, m.value) for m in type_]\n            )\n            kwargs.update(\n                {\n                    \"type\": \"select\",\n                    \"options\": [{\"label\": label, \"value\": v} for v, label in items],\n                    \"extractValue\": True,\n                    \"joinValues\": False,\n                }\n            )\n            if not required or is_filter:\n                kwargs[\"clearable\"] = True\n        elif issubclass(type_, bool):\n            kwargs[\"type\"] = \"switch\"\n        elif is_filter:\n            if issubclass(type_, datetime.datetime):\n                kwargs[\"type\"] = \"input-datetime-range\"\n                kwargs[\"format\"] = \"YYYY-MM-DD HH:mm:ss\"\n                # \u7ed9\u7b5b\u9009\u7684 DateTimeRange \u6dfb\u52a0 today \u6807\u7b7e\n                kwargs[\n                    \"ranges\"\n                ] = \"today,yesterday,7daysago,prevweek,thismonth,prevmonth,prevquarter\"\n            elif issubclass(type_, datetime.date):\n                kwargs[\"type\"] = \"input-date-range\"\n                kwargs[\"format\"] = \"YYYY-MM-DD\"\n            elif issubclass(type_, datetime.time):\n                kwargs[\"type\"] = \"input-time-range\"\n                kwargs[\"format\"] = \"HH:mm:ss\"\n            else:\n                kwargs[\"type\"] = \"input-text\"\n        elif issubclass(type_, int):\n            kwargs[\"type\"] = \"input-number\"\n            kwargs[\"precision\"] = 0\n            kwargs[\"validations\"] = Validation(isInt=True).amis_dict()\n        elif issubclass(type_, float):\n            kwargs[\"type\"] = \"input-number\"\n            kwargs[\"precision\"] = 3\n            kwargs[\"validations\"] = Validation(isFloat=True).amis_dict()\n        elif issubclass(type_, datetime.datetime):\n            kwargs[\"type\"] = \"input-datetime\"\n            kwargs[\"format\"] = \"YYYY-MM-DD HH:mm:ss\"\n        elif issubclass(type_, datetime.date):\n            kwargs[\"type\"] = \"input-date\"\n            kwargs[\"format\"] = \"YYYY-MM-DD\"\n        elif issubclass(type_, datetime.time):\n            kwargs[\"type\"] = \"input-time\"\n            kwargs[\"format\"] = \"HH:mm:ss\"\n        elif issubclass(type_, (dict, Json)):\n            kwargs[\"type\"] = \"json-editor\"\n        elif issubclass(type_, BaseModel):\n            # pydantic model parse to InputSubForm\n            kwargs[\"type\"] = \"input-sub-form\"\n            kwargs[\"labelField\"] = get_model_label_field_name(type_)\n            kwargs[\"btnLabel\"] = model_config_attr(type_, \"title\", None)\n            kwargs[\"form\"] = self.as_amis_form(type_, is_filter=is_filter).amis_dict()\n        else:\n            kwargs[\"type\"] = \"input-text\"\n        if kwargs.get(\"type\") == \"input-text\":\n            kwargs[\"clearable\"] = True\n            kwargs[\"clearValueOnEmpty\"] = True\n        return kwargs"}