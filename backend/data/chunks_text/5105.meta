{"original_code": "    def __init__(\n        self,\n        scope: core.Construct,\n        id: str,\n        memory: int = 1024,\n        timeout: int = 30,\n        runtime: aws_lambda.Runtime = aws_lambda.Runtime.PYTHON_3_9,\n        concurrent: Optional[int] = None,\n        permissions: Optional[List[iam.PolicyStatement]] = None,\n        environment: Optional[Dict] = None,\n        code_dir: str = \"./\",\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Define stack.\"\"\"\n        super().__init__(scope, id, **kwargs)\n\n        permissions = permissions or []\n        environment = environment or {}\n\n        lambda_function = aws_lambda.Function(\n            self,\n            f\"{id}-lambda\",\n            runtime=runtime,\n            code=aws_lambda.Code.from_docker_build(\n                path=os.path.abspath(code_dir),\n                file=\"lambda/Dockerfile\",\n            ),\n            handler=\"handler.handler\",\n            memory_size=memory,\n            reserved_concurrent_executions=concurrent,\n            timeout=core.Duration.seconds(timeout),\n            environment=environment,\n            log_retention=logs.RetentionDays.ONE_WEEK,\n        )\n\n        for perm in permissions:\n            lambda_function.add_to_role_policy(perm)\n\n        api = apigw.HttpApi(\n            self,\n            f\"{id}-endpoint\",\n            default_integration=apigw_integrations.HttpLambdaIntegration(\n                f\"{id}-integration\", handler=lambda_function\n            ),\n        )\n        core.CfnOutput(self, \"Endpoint\", value=api.url)"}