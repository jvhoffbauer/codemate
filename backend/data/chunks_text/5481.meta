{"original_code": "def test_part(rio, app):\n    \"\"\"test /crop endpoint.\"\"\"\n    rio.open = mock_rasterio_open\n\n    response = app.get(\n        \"/cog/crop/-56.228,72.715,-54.547,73.188.png?url=https://myurl.com/cog.tif&rescale=0,1000&max_size=256\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"count\"] == 2\n    assert meta[\"width\"] == 256\n    assert meta[\"height\"] == 73\n    assert meta[\"driver\"] == \"PNG\"\n\n    response = app.get(\n        \"/cog/crop/-56.228,72.715,-54.547,73.188.jpg?url=https://myurl.com/cog.tif&rescale=0,1000&max_size=256&return_mask=false\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/jpg\"\n    meta = parse_img(response.content)\n    assert meta[\"count\"] == 1\n    assert meta[\"width\"] == 256\n    assert meta[\"height\"] == 73\n    assert meta[\"driver\"] == \"JPEG\"\n\n    response = app.get(\n        \"/cog/crop/-56.228,72.715,-54.547,73.188/128x128.png?url=https://myurl.com/cog.tif&rescale=0,1000&max_size=256\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"width\"] == 128\n    assert meta[\"height\"] == 128\n    assert meta[\"driver\"] == \"PNG\"\n\n    response = app.get(\n        \"/cog/crop/-56.228,72.715,-54.547,73.188.png?url=https://myurl.com/cog.tif&rescale=0,1000&max_size=256&width=512&height=512\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"image/png\"\n    meta = parse_img(response.content)\n    assert meta[\"width\"] == 512\n    assert meta[\"height\"] == 512\n    assert meta[\"driver\"] == \"PNG\"\n\n    response = app.get(\n        \"/cog/crop/-56.228,72.715,-54.547,73.188.npy?url=https://myurl.com/cog.tif&rescale=0,1000&max_size=256\"\n    )\n    assert response.status_code == 200\n    assert response.headers[\"content-type\"] == \"application/x-binary\"\n    data = numpy.load(BytesIO(response.content))\n    assert data.shape == (2, 73, 256)"}