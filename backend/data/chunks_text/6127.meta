{"original_code": "async def test_route_create(async_client: AsyncClient, models):\n    # create one\n    body = {\"username\": \"User\", \"password\": \"password\"}\n    res = await async_client.post(\"/User/item\", json=body)\n    data = res.json().get(\"data\")\n    assert data[\"id\"] > 0\n    assert data[\"username\"] == \"User\"\n    user = await db.session.get(models.User, data[\"id\"])\n    assert user.id == data[\"id\"], user\n    await db.session.delete(user)\n    # await db.session.flush()  # If flush is used here, the sqlite database is locked, causing subsequent tests to fail\n    await db.session.commit()  # Commit transaction, delete data\n\n    # create bulk\n    count = 3\n    users = [\n        {\n            \"id\": i,\n            \"username\": f\"User_{i}\",\n            \"password\": \"password\",\n            \"create_time\": f\"2022-01-0{i + 1} 00:00:00\",\n            \"address\": [\"address_1\", \"address_2\"],\n            \"attach\": {\"attach_1\": \"attach_1\", \"attach_2\": \"attach_2\"},\n        }\n        for i in range(1, count + 1)\n    ]\n    res = await async_client.post(\"/User/item\", json=users)\n    assert res.json()[\"data\"] == count\n    stmt = select(func.count(models.User.id))\n    result = await db.scalar(stmt)\n    assert result == count"}