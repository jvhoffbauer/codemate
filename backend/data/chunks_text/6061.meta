{"original_code": "async def test_perm_fields_exclude(site: AdminSite, models):\n    @site.register_admin\n    class ArticleAdmin(admin.BaseAuthFieldModelAdmin):\n        model = models.Article\n        read_fields = [\n            models.Article.id,\n            models.Article.title,\n            models.Article.description,\n            models.Article.status,\n            models.Article.category_id,\n        ]\n        perm_fields_exclude = {\n            FieldPermEnum.VIEW: [\"id\", \"title\"],\n            FieldPermEnum.UPDATE: [\"status\"],\n            FieldPermEnum.CREATE: [\"description\", \"status\"],\n        }\n\n    site.register_router()\n    ins = site.get_admin_or_create(ArticleAdmin)\n    # create_permission_fields\n    assert \"description\" not in ins.create_permission_fields\n    assert \"status\" not in ins.create_permission_fields\n    assert \"category_id\" in ins.create_permission_fields\n\n    # update_permission_fields\n    assert \"status\" not in ins.update_permission_fields\n    assert \"category_id\" in ins.update_permission_fields\n\n    # read_permission_fields\n    assert \"id\" not in ins.read_permission_fields\n    # title not in read_permission_fields, because title is required in schema_read\n    assert \"title\" not in ins.read_permission_fields\n    assert \"category_id\" in ins.read_permission_fields\n\n    # list_permission_fields\n    assert \"id\" not in ins.list_permission_fields\n    assert \"title\" not in ins.list_permission_fields\n    assert \"category_id\" in ins.create_permission_fields\n\n    # filter_permission_fields\n    assert \"id\" not in ins.filter_permission_fields\n    assert \"title\" not in ins.filter_permission_fields\n    assert \"category_id\" in ins.create_permission_fields"}