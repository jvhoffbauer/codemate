{"original_code": "def test_stacExtension():\n    \"\"\"Test stacExtension class.\"\"\"\n    tiler = TilerFactory()\n    tiler_plus_stac = TilerFactory(extensions=[stacExtension()])\n    # Check that we added one route (/stac)\n    assert len(tiler_plus_stac.router.routes) == len(tiler.router.routes) + 1\n\n    app = FastAPI()\n    app.include_router(tiler_plus_stac.router)\n    with TestClient(app) as client:\n        response = client.get(\"/stac\", params={\"url\": cog})\n        assert response.status_code == 200\n        body = response.json()\n        assert pystac.Item.from_dict(body).validate()\n        assert body[\"id\"] == \"cog.tif\"\n        assert body[\"assets\"][\"data\"][\"type\"] == \"image/tiff; application=geotiff\"\n\n        response = client.get(\"/stac\", params={\"url\": cog, \"id\": \"cog\"})\n        assert response.status_code == 200\n        body = response.json()\n        assert body[\"id\"] == \"cog\"\n        assert pystac.Item.from_dict(body).validate()\n\n        response = client.get(\"/stac\", params={\"url\": cog, \"datetime\": \"2010-01-01\"})\n        assert response.status_code == 200\n        body = response.json()\n        assert body[\"properties\"][\"datetime\"] == \"2010-01-01T00:00:00Z\"\n        assert pystac.Item.from_dict(body).validate()\n\n        response = client.get(\n            \"/stac\", params={\"url\": cog, \"datetime\": \"2010-01-01/2010-01-02\"}\n        )\n        assert response.status_code == 200\n        body = response.json()\n        assert \"datetime\" in body[\"properties\"]\n        assert not body[\"properties\"][\"datetime\"]\n        assert body[\"properties\"][\"start_datetime\"] == \"2010-01-01T00:00:00Z\"\n        assert body[\"properties\"][\"end_datetime\"] == \"2010-01-02T00:00:00Z\"\n        assert pystac.Item.from_dict(body).validate()\n\n        response = client.get(\n            \"/stac\",\n            params={\n                \"url\": cog,\n                \"asset_media_type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n            },\n        )\n        assert response.status_code == 200\n        body = response.json()\n        assert (\n            body[\"assets\"][\"data\"][\"type\"]\n            == \"image/tiff; application=geotiff; profile=cloud-optimized\"\n        )\n        assert pystac.Item.from_dict(body).validate()"}