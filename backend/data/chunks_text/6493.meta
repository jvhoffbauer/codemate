{"original_code": "    def get_openrpc(self):\n        methods_spec = []\n        schemas_spec = {}\n        errors_by_code = defaultdict(set)\n        ref_template = \"#/components/schemas/{model}\"\n\n        for route in self.routes:\n            if not isinstance(route, MethodRoute):\n                continue\n\n            params_schema = route.params_model.model_json_schema(\n                ref_template=ref_template\n            )\n\n            if isinstance(route.result_model, BaseModel):\n                result_schema = route.result_model.model_json_schema(\n                    ref_template=ref_template\n                )\n            else:\n                result_model = create_model(\n                    f\"{route.name}_Result\", result=(route.result_model or Any, ...)\n                )\n                result_schema = result_model.model_json_schema(\n                    ref_template=ref_template\n                )\n\n            for error in route.errors:\n                errors_by_code[error.CODE].add(error)\n\n            method_spec = {\n                \"name\": route.name,\n                \"params\": [\n                    {\n                        \"name\": param_name,\n                        \"schema\": param_schema,\n                        \"required\": param_name in params_schema.get(\"required\", []),\n                    }\n                    for param_name, param_schema in params_schema[\"properties\"].items()\n                ],\n                \"result\": {\n                    \"name\": result_schema[\"title\"],\n                    \"schema\": result_schema[\"properties\"][\"result\"],\n                },\n                \"tags\": [\n                    {\n                        \"name\": tag,\n                    }\n                    for tag in route.tags\n                ],\n                \"errors\": [\n                    {\n                        \"$ref\": f\"#/components/errors/{code}\",\n                    }\n                    for code in sorted({error.CODE for error in route.errors})\n                ],\n            }\n            if route.summary:\n                method_spec[\"summary\"] = route.summary\n\n            methods_spec.append(method_spec)\n            schemas_spec.update(params_schema.get(\"$defs\", {}))\n            schemas_spec.update(result_schema.get(\"$defs\", {}))\n\n        errors_spec = {}\n        for code, errors in errors_by_code.items():\n            assert errors\n            first, *_ = errors\n            spec = {\n                \"code\": code,\n                \"message\": first.MESSAGE,\n            }\n\n            error_models = []\n            for error in errors:\n                error_model = error.get_data_model()\n                if error_model is not None:\n                    error_models.append(error_model)\n\n            if error_models:\n                if len(error_models) == 1:\n                    error_schema = error_models[0].schema(ref_template=ref_template)\n                else:\n                    # Data schemes of multiple error objects with same code\n                    # are merged together in a single schema\n                    error_models.sort(key=lambda m: m.__name__)\n                    error_schema = pydantic.TypeAdapter(\n                        Union[tuple(error_models)]\n                    ).json_schema(\n                        ref_template=ref_template,\n                    )\n                    error_schema[\"title\"] = f\"ERROR_{code}\"\n\n                schemas_spec.update(error_schema.pop(\"$defs\", {}))\n                spec[\"data\"] = error_schema\n\n            errors_spec[str(code)] = spec\n\n        return {\n            \"openrpc\": \"1.2.6\",\n            \"info\": {\n                \"version\": self.version,\n                \"title\": self.title,\n            },\n            \"servers\": self.servers,\n            \"methods\": methods_spec,\n            \"components\": {\n                \"schemas\": schemas_spec,\n                \"errors\": errors_spec,\n            },\n        }"}