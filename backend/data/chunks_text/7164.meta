{"original_code": "def register_exception(app: FastAPI) -> None:\n    \"\"\"\n    \u5168\u5c40\u5f02\u5e38\u6355\u83b7\n    \u6ce8\u610f \u522b\u624b\u8bef\u591a\u6572\u4e00\u4e2as\n    exception_handler\n    exception_handlers\n    \u4e24\u8005\u6709\u533a\u522b\n        \u5982\u679c\u53ea\u6355\u83b7\u4e00\u4e2a\u5f02\u5e38 \u542f\u52a8\u4f1a\u62a5\u9519\n        @exception_handlers(UserNotFound)\n    TypeError: 'dict' object is not callable\n    :param app:\n    :return:\n    \"\"\"\n\n    # \u81ea\u5b9a\u4e49\u5f02\u5e38 \u6355\u83b7\n    @app.exception_handler(custom_exc.TokenExpired)\n    async def user_not_found_exception_handler(\n        request: Request, exc: custom_exc.TokenExpired\n    ):\n        \"\"\"\n        token\u8fc7\u671f\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(\n            f\"token\u672a\u77e5\u7528\u6237\\nURL:{request.method}{request.url}\\nHeaders:{request.headers}\\n{traceback.format_exc()}\"\n        )\n\n        return resp.fail(message=exc.err_desc)\n\n    @app.exception_handler(custom_exc.TokenAuthError)\n    async def user_token_exception_handler(\n        request: Request, exc: custom_exc.TokenAuthError\n    ):\n        \"\"\"\n        \u7528\u6237token\u5f02\u5e38\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(\n            f\"\u7528\u6237\u8ba4\u8bc1\u5f02\u5e38\\nURL:{request.method}{request.url}\\nHeaders:{request.headers}\\n{traceback.format_exc()}\"\n        )\n\n        return resp.fail(resp.DataNotFound.set_msg(exc.err_desc))\n\n    @app.exception_handler(custom_exc.AuthenticationError)\n    async def user_not_found_exception_handler(\n        request: Request, exc: custom_exc.AuthenticationError\n    ):\n        \"\"\"\n        \u7528\u6237\u6743\u9650\u4e0d\u8db3\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(f\"\u7528\u6237\u6743\u9650\u4e0d\u8db3 \\nURL:{request.method}{request.url}\")\n        return resp.fail(resp.PermissionDenied)\n\n    @app.exception_handler(ValidationError)\n    async def inner_validation_exception_handler(\n        request: Request, exc: ValidationError\n    ):\n        \"\"\"\n        \u5185\u90e8\u53c2\u6570\u9a8c\u8bc1\u5f02\u5e38\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(\n            f\"\u5185\u90e8\u53c2\u6570\u9a8c\u8bc1\u9519\u8bef\\nURL:{request.method}{request.url}\\nHeaders:{request.headers}\\n{traceback.format_exc()}\"\n        )\n        return resp.fail(resp.BusinessError.set_msg(exc.errors()))\n\n    @app.exception_handler(RequestValidationError)\n    async def request_validation_exception_handler(\n        request: Request, exc: RequestValidationError\n    ):\n        \"\"\"\n        \u8bf7\u6c42\u53c2\u6570\u9a8c\u8bc1\u5f02\u5e38\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(\n            f\"\u8bf7\u6c42\u53c2\u6570\u683c\u5f0f\u9519\u8bef\\nURL:{request.method}{request.url}\\nHeaders:{request.headers}\\n{traceback.format_exc()}\"\n        )\n        # return response_code.resp_4001(message='; '.join([f\"{e['loc'][1]}: {e['msg']}\" for e in exc.errors()]))\n        return resp.fail(resp.InvalidParams.set_msg(exc.errors()))\n\n    # \u6355\u83b7\u5168\u90e8\u5f02\u5e38\n    @app.exception_handler(Exception)\n    async def all_exception_handler(request: Request, exc: Exception):\n        \"\"\"\n        \u5168\u5c40\u6240\u6709\u5f02\u5e38\n        :param request:\n        :param exc:\n        :return:\n        \"\"\"\n        logger.error(\n            f\"\u5168\u5c40\u5f02\u5e38\\n{request.method}URL:{request.url}\\nHeaders:{request.headers}\\n{traceback.format_exc()}\"\n        )\n        return resp.fail(resp.ServerError)"}