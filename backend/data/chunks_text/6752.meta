{"original_code": "def test_errors_merging(ep, app, app_client):\n    class FirstError(jsonrpc.BaseError):\n        CODE = 5000\n        MESSAGE = \"My error\"\n\n        class DataModel(BaseModel):\n            x: str\n\n    class SecondError(jsonrpc.BaseError):\n        CODE = 5000\n        MESSAGE = \"My error\"\n\n        class DataModel(BaseModel):\n            y: int\n\n    @ep.method(errors=[FirstError, SecondError])\n    def my_method__with_mergeable_errors() -> None:\n        return None\n\n    app.bind_entrypoint(ep)\n\n    resp = app_client.get(\"/openrpc.json\")\n    schema = resp.json()\n\n    assert len(schema[\"methods\"]) == 1\n    assert schema[\"methods\"][0][\"errors\"] == [{\"$ref\": \"#/components/errors/5000\"}]\n    assert schema[\"components\"][\"errors\"][\"5000\"] == {\n        \"code\": 5000,\n        \"message\": \"My error\",\n        \"data\": {\n            \"title\": \"ERROR_5000\",\n            \"anyOf\": [\n                {\"$ref\": \"#/components/schemas/FirstError.Data\"},\n                {\"$ref\": \"#/components/schemas/SecondError.Data\"},\n            ],\n        },\n    }\n    assert schema[\"components\"][\"schemas\"][\"FirstError.Data\"] == {\n        \"title\": \"FirstError.Data\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"x\": {\"type\": \"string\", \"title\": \"X\"},\n        },\n        \"required\": [\"x\"],\n    }\n    assert schema[\"components\"][\"schemas\"][\"SecondError.Data\"] == {\n        \"title\": \"SecondError.Data\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"y\": {\"type\": \"integer\", \"title\": \"Y\"},\n        },\n        \"required\": [\"y\"],\n    }"}