{"original_code": "def component_name(name: str, module: str = None):\n    \"\"\"OpenAPI components must be unique by name\"\"\"\n\n    def decorator(obj):\n        assert issubclass(obj, BaseModel)\n        opts = {\n            \"__base__\": tuple(obj.mro()[1:]),  # remove self from __base__\n            \"__module__\": module or obj.__module__,\n            **{\n                field_name: (field.annotation, field)\n                for field_name, field in obj.model_fields.items()\n            },\n        }\n        if obj.model_config:\n            opts.pop(\"__base__\")\n            opts[\"__config__\"] = obj.model_config\n\n        # re-create model to ensure given name will be applied to json schema\n        # since Pydantic 2.0 model json schema generated at class creation process\n\n        obj = create_model(name, **opts)\n\n        if module is not None:\n            obj.__module__ = module  # see: pydantic._internal._core_utils.get_type_ref\n        key = (obj.__name__, obj.__module__)\n        if key in components:\n            lhs = components[key].model_json_schema()\n            rhs = obj.model_json_schema()\n            if lhs != rhs:\n                raise RuntimeError(\n                    f\"Different models with the same name detected: {lhs!r} != {rhs}\"\n                )\n            return components[key]\n        components[key] = obj\n        return obj\n\n    return decorator"}