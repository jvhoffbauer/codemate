{"original_code": "    def _create_schema_filter(self) -> Type[SchemaFilterT]:\n        # Get the filter fields from the list filter or select entities\n        list_filter = self.list_filter or self._select_entities.values()\n        # Filter out the model fields from the filter fields\n        modelfields = self.parser.filter_modelfield(list_filter, save_class=(Label,))\n        # Modify the modelfields if necessary\n        for modelfield in modelfields:\n            type_ = annotation_outer_type(modelfield.type_)\n            if field_annotation_is_scalar(modelfield.type_) and issubclass(\n                type_, (Enum, bool, str)\n            ):\n                continue\n            if PYDANTIC_V2:\n                modelfield.field_info.annotation = str\n            else:\n                modelfield.type_ = str\n                modelfield.outer_type_ = str\n                modelfield.validators = []\n        # Create the schema using the model fields\n        return create_model_by_fields(\n            name=f\"{self.schema_name_prefix}Filter\",\n            fields=modelfields,\n            set_none=True,\n        )"}