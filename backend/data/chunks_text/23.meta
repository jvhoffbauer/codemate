{"original_code": "def get_column_from_field(field: Any) -> Column:  # type: ignore\n    if IS_PYDANTIC_V2:\n        field_info = field\n    else:\n        field_info = field.field_info\n    sa_column = getattr(field_info, \"sa_column\", Undefined)\n    if isinstance(sa_column, Column):\n        return sa_column\n    sa_type = get_sqlalchemy_type(field)\n    primary_key = getattr(field_info, \"primary_key\", Undefined)\n    if primary_key is Undefined:\n        primary_key = False\n    index = getattr(field_info, \"index\", Undefined)\n    if index is Undefined:\n        index = False\n    nullable = not primary_key and is_field_noneable(field)\n    # Override derived nullability if the nullable property is set explicitly\n    # on the field\n    field_nullable = getattr(field_info, \"nullable\", Undefined)  # noqa: B009\n    if field_nullable is not Undefined:\n        assert not isinstance(field_nullable, UndefinedType)\n        nullable = field_nullable\n    args = []\n    foreign_key = getattr(field_info, \"foreign_key\", Undefined)\n    if foreign_key is Undefined:\n        foreign_key = None\n    unique = getattr(field_info, \"unique\", Undefined)\n    if unique is Undefined:\n        unique = False\n    if foreign_key:\n        assert isinstance(foreign_key, str)\n        args.append(ForeignKey(foreign_key))\n    kwargs = {\n        \"primary_key\": primary_key,\n        \"nullable\": nullable,\n        \"index\": index,\n        \"unique\": unique,\n    }\n    sa_default = Undefined\n    if field_info.default_factory:\n        sa_default = field_info.default_factory\n    elif field_info.default is not Undefined:\n        sa_default = field_info.default\n    if sa_default is not Undefined:\n        kwargs[\"default\"] = sa_default\n    sa_column_args = getattr(field_info, \"sa_column_args\", Undefined)\n    if sa_column_args is not Undefined:\n        args.extend(list(cast(Sequence[Any], sa_column_args)))\n    sa_column_kwargs = getattr(field_info, \"sa_column_kwargs\", Undefined)\n    if sa_column_kwargs is not Undefined:\n        kwargs.update(cast(Dict[Any, Any], sa_column_kwargs))\n    return Column(sa_type, *args, **kwargs)  # type: ignore"}