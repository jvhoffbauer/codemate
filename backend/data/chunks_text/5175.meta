{"original_code": "    def map_viewer(self):  # noqa: C901\n        \"\"\"Register /map endpoint.\"\"\"\n\n        @self.router.get(\"/map\", response_class=HTMLResponse)\n        @self.router.get(\"/{TileMatrixSetId}/map\", response_class=HTMLResponse)\n        def map_viewer(\n            request: Request,\n            src_path=Depends(self.path_dependency),\n            TileMatrixSetId: Literal[tuple(self.supported_tms.list())] = Query(\n                self.default_tms,\n                description=f\"TileMatrixSet Name (default: '{self.default_tms}')\",\n            ),  # noqa\n            tile_format: Optional[ImageType] = Query(\n                None, description=\"Output image type. Default is auto.\"\n            ),  # noqa\n            tile_scale: int = Query(\n                1, gt=0, lt=4, description=\"Tile size scale. 1=256x256, 2=512x512...\"\n            ),  # noqa\n            minzoom: Optional[int] = Query(\n                None, description=\"Overwrite default minzoom.\"\n            ),  # noqa\n            maxzoom: Optional[int] = Query(\n                None, description=\"Overwrite default maxzoom.\"\n            ),  # noqa\n            layer_params=Depends(self.layer_dependency),  # noqa\n            dataset_params=Depends(self.dataset_dependency),  # noqa\n            buffer: Optional[float] = Query(  # noqa\n                None,\n                gt=0,\n                title=\"Tile buffer.\",\n                description=\"Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).\",\n            ),\n            post_process=Depends(self.process_dependency),  # noqa\n            rescale: Optional[List[Tuple[float, ...]]] = Depends(\n                RescalingParams\n            ),  # noqa\n            color_formula: Optional[str] = Query(  # noqa\n                None,\n                title=\"Color Formula\",\n                description=\"rio-color formula (info: https://github.com/mapbox/rio-color)\",\n            ),\n            colormap=Depends(self.colormap_dependency),  # noqa\n            render_params=Depends(self.render_dependency),  # noqa\n            reader_params=Depends(self.reader_dependency),  # noqa\n            env=Depends(self.environment_dependency),  # noqa\n        ):\n            \"\"\"Return TileJSON document for a dataset.\"\"\"\n            tilejson_url = self.url_for(\n                request, \"tilejson\", TileMatrixSetId=TileMatrixSetId\n            )\n            if request.query_params._list:\n                tilejson_url += f\"?{urlencode(request.query_params._list)}\"\n\n            tms = self.supported_tms.get(TileMatrixSetId)\n            return templates.TemplateResponse(\n                name=\"index.html\",\n                context={\n                    \"request\": request,\n                    \"tilejson_endpoint\": tilejson_url,\n                    \"tms\": tms,\n                    \"resolutions\": [tms._resolution(matrix) for matrix in tms],\n                },\n                media_type=\"text/html\",\n            )"}