{"original_code": "@patch(\"rio_tiler.io.rasterio.rasterio\")\ndef test_tilejson(rio, app):\n    \"\"\"test /tilejson endpoint.\"\"\"\n    rio.open = mock_rasterio_open\n\n    response = app.get(\"/cog/tilejson.json?url=https://myurl.com/cog.tif\")\n    assert response.status_code == 200\n    body = response.json()\n    assert body[\"tilejson\"] == \"2.2.0\"\n    assert body[\"version\"] == \"1.0.0\"\n    assert body[\"scheme\"] == \"xyz\"\n    assert len(body[\"tiles\"]) == 1\n    assert body[\"tiles\"][0].startswith(\n        \"http://testserver/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https\"\n    )\n    assert body[\"minzoom\"] == 5\n    assert body[\"maxzoom\"] == 9\n    assert body[\"bounds\"]\n    assert body[\"center\"]\n\n    response = app.get(\n        \"/cog/tilejson.json?url=https://myurl.com/cog.tif&tile_format=png&tile_scale=2\"\n    )\n    assert response.status_code == 200\n    body = response.json()\n    assert body[\"tiles\"][0].startswith(\n        \"http://testserver/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@2x.png?url=https\"\n    )\n\n    cmap_dict = {\n        \"1\": [58, 102, 24, 255],\n        \"2\": [100, 177, 41],\n        \"3\": \"#b1b129\",\n        \"4\": \"#ddcb9aFF\",\n    }\n    cmap = urlencode({\"colormap\": json.dumps(cmap_dict)})\n    response = app.get(\n        f\"/cog/tilejson.json?url=https://myurl.com/above_cog.tif&bidx=1&{cmap}\"\n    )\n    assert response.status_code == 200\n    body = response.json()\n    assert body[\"tiles\"][0].startswith(\n        \"http://testserver/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https\"\n    )\n    query = dict(parse_qsl(urlparse(body[\"tiles\"][0]).query))\n    assert json.loads(query[\"colormap\"]) == cmap_dict"}