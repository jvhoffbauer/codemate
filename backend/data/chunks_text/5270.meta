{"original_code": "@attr.s(frozen=True)\nclass Algorithms:\n    \"\"\"Algorithms.\"\"\"\n\n    data: Dict[str, Type[BaseAlgorithm]] = attr.ib()\n\n    def get(self, name: str) -> BaseAlgorithm:\n        \"\"\"Fetch a TMS.\"\"\"\n        if name not in self.data:\n            raise KeyError(f\"Invalid name: {name}\")\n\n        return self.data[name]\n\n    def list(self) -> List[str]:\n        \"\"\"List registered Algorithm.\"\"\"\n        return list(self.data.keys())\n\n    def register(\n        self,\n        algorithms: Dict[str, BaseAlgorithm],\n        overwrite: bool = False,\n    ) -> \"Algorithms\":\n        \"\"\"Register Algorithm(s).\"\"\"\n        for name, _algo in algorithms.items():\n            if name in self.data and not overwrite:\n                raise Exception(f\"{name} is already a registered. Use overwrite=True.\")\n\n        return Algorithms({**self.data, **algorithms})\n\n    @property\n    def dependency(self):\n        \"\"\"FastAPI PostProcess dependency.\"\"\"\n\n        def post_process(\n            algorithm: Literal[tuple(self.data.keys())] = Query(\n                None, description=\"Algorithm name\"\n            ),\n            algorithm_params: str = Query(None, description=\"Algorithm parameter\"),\n        ) -> Optional[BaseAlgorithm]:\n            \"\"\"Data Post-Processing options.\"\"\"\n            kwargs = json.loads(algorithm_params) if algorithm_params else {}\n            if algorithm:\n                try:\n                    return self.get(algorithm)(**kwargs)\n\n                except ValidationError as e:\n                    raise HTTPException(status_code=400, detail=str(e)) from e\n\n            return None\n\n        return post_process"}