{"original_code": "    def __new__(metacls, classname, bases, classdict, **kwds):\n        labels = []\n        for key in classdict._member_names:\n            value = classdict[key]\n            if (\n                isinstance(value, (list, tuple))\n                and len(value) > 1\n                and isinstance(value[-1], (Promise, str))\n            ):\n                *value, label = value\n                value = tuple(value)\n            else:\n                label = key.replace(\"_\", \" \").title()\n            labels.append(label)\n            # Use dict.__setitem__() to suppress defenses against double\n            # assignment in enum's classdict.\n            dict.__setitem__(classdict, key, value)\n        cls = super().__new__(metacls, classname, bases, classdict, **kwds)\n        cls._value2label_map_ = dict(zip(cls._value2member_map_, labels))\n        # Add a label property to instances of enum which uses the enum member\n        # that is passed in as \"self\" as the value to use when looking up the\n        # label in the choices.\n        cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n        cls.do_not_call_in_templates = True\n        return enum.unique(cls)"}