{"original_code": "    async def handle_req_to_resp(\n        self,\n        http_request: Request,\n        background_tasks: BackgroundTasks,\n        sub_response: Response,\n        req: Any,\n        dependency_cache: dict = None,\n        shared_dependencies_error: BaseError = None,\n    ) -> dict:\n        async with JsonRpcContext(\n            entrypoint=self.entrypoint,\n            method_route=self,\n            raw_request=req,\n            http_request=http_request,\n            background_tasks=background_tasks,\n            http_response=sub_response,\n            json_rpc_request_class=self.request_class,\n        ) as ctx:\n            await ctx.enter_middlewares(self.entrypoint.middlewares)\n\n            if ctx.request.method != self.name:\n                raise MethodNotFound\n\n            resp = await self.handle_req(\n                http_request,\n                background_tasks,\n                sub_response,\n                ctx,\n                dependency_cache=dependency_cache,\n                shared_dependencies_error=shared_dependencies_error,\n            )\n            ctx.on_raw_response(resp)\n\n        return ctx.raw_response"}