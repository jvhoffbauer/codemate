{"original_code": "    async def __call__(self, scope: \"Scope\", receive: \"Receive\", send: \"Send\") -> None:\n        \"\"\"\n        Load request ID from headers if present. Generate one otherwise.\n        \"\"\"\n        if scope[\"type\"] not in (\"http\", \"websocket\"):\n            await self.app(scope, receive, send)\n            return\n\n        # Try to load request ID from the request headers\n        headers = MutableHeaders(scope=scope)\n        header_value = headers.get(self.header_name.lower())\n\n        validation_failed = False\n        if not header_value:\n            # Generate request ID if none was found\n            id_value = self.generator()\n        elif self.validator and not self.validator(header_value):\n            # Also generate a request ID if one was found, but it was deemed invalid\n            validation_failed = True\n            id_value = self.generator()\n        else:\n            # Otherwise, use the found request ID\n            id_value = header_value\n\n        # Clean/change the ID if needed\n        if self.transformer:\n            id_value = self.transformer(id_value)\n\n        if validation_failed is True:\n            logger.warning(FAILED_VALIDATION_MESSAGE, id_value)\n\n        # Update the request headers if needed\n        if id_value != header_value and self.update_request_header is True:\n            headers[self.header_name] = id_value\n\n        correlation_id.set(id_value)\n        self.sentry_extension(id_value)\n\n        async def handle_outgoing_request(message: \"Message\") -> None:\n            if message[\"type\"] == \"http.response.start\" and correlation_id.get():\n                headers = MutableHeaders(scope=message)\n                headers.append(self.header_name, correlation_id.get())\n\n            await send(message)\n\n        await self.app(scope, receive, handle_outgoing_request)\n        return"}