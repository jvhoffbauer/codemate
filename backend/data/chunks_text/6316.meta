{"original_code": "async def get_current_user(\n    session: AsyncSession = Depends(get_session), token: str = Depends(reusable_oauth2)\n) -> User:\n    try:\n        payload = jwt.decode(\n            token, config.settings.SECRET_KEY, algorithms=[security.JWT_ALGORITHM]\n        )\n    except jwt.DecodeError:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Could not validate credentials.\",\n        )\n    # JWT guarantees payload will be unchanged (and thus valid), no errors here\n    token_data = security.JWTTokenPayload(**payload)\n\n    if token_data.refresh:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Could not validate credentials, cannot use refresh token\",\n        )\n    now = int(time.time())\n    if now < token_data.issued_at or now > token_data.expires_at:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Could not validate credentials, token expired or not yet valid\",\n        )\n\n    result = await session.execute(select(User).where(User.id == token_data.sub))\n    user = result.scalars().first()\n\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found.\")\n    return user"}