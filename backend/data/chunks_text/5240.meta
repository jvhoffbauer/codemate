{"original_code": "@dataclass\nclass AssetsBidxParams(AssetsParams):\n    \"\"\"Assets, Asset's band Indexes and Asset's band Expression parameters.\"\"\"\n\n    asset_indexes: Optional[Sequence[str]] = Query(\n        None,\n        title=\"Per asset band indexes\",\n        description=\"Per asset band indexes\",\n        alias=\"asset_bidx\",\n        examples={\n            \"one-asset\": {\n                \"description\": \"Return indexes 1,2,3 of asset `data`.\",\n                \"value\": [\"data|1;2;3\"],\n            },\n            \"multi-assets\": {\n                \"description\": \"Return indexes 1,2,3 of asset `data` and indexes 1 of asset `cog`\",\n                \"value\": [\"data|1;2;3\", \"cog|1\"],\n            },\n        },\n    )\n\n    asset_expression: Optional[Sequence[str]] = Query(\n        None,\n        title=\"Per asset band expression\",\n        description=\"Per asset band expression\",\n        examples={\n            \"one-asset\": {\n                \"description\": \"Return results for expression `b1*b2+b3` of asset `data`.\",\n                \"value\": [\"data|b1*b2+b3\"],\n            },\n            \"multi-assets\": {\n                \"description\": \"Return results for expressions `b1*b2+b3` for asset `data` and `b1+b3` for asset `cog`.\",\n                \"value\": [\"data|b1*b2+b3\", \"cog|b1+b3\"],\n            },\n        },\n    )\n\n    def __post_init__(self):\n        \"\"\"Post Init.\"\"\"\n        if self.asset_indexes:\n            self.asset_indexes: Dict[str, Sequence[int]] = {  # type: ignore\n                idx.split(\"|\")[0]: list(map(int, idx.split(\"|\")[1].split(\",\")))\n                for idx in self.asset_indexes\n            }\n\n        if self.asset_expression:\n            self.asset_expression: Dict[str, str] = {  # type: ignore\n                idx.split(\"|\")[0]: idx.split(\"|\")[1] for idx in self.asset_expression\n            }"}