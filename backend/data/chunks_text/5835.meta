{"original_code": "    def _get_form_item_from_kwargs(\n        self, modelfield: ModelField, is_filter: bool = False\n    ) -> FormItem:\n        formitem = self.get_field_amis_extra(\n            modelfield, [\"amis_form_item\", \"amis_filter_item\"][is_filter]\n        )\n        # List type parse to InputArray\n        outer_type = field_outer_type(modelfield) or modelfield.type_\n        if field_annotation_is_sequence(outer_type):\n            if not isinstance(formitem, FormItem):\n                formitem = InputArray(**formitem)\n            elif not isinstance(formitem, InputArray):\n                return formitem\n            # Parse the internal type of the list.\n            type_ = scalar_sequence_inner_type(outer_type)\n            kwargs = self.get_field_amis_form_item_type(\n                type_=type_, is_filter=is_filter\n            )\n            update = formitem.items.amis_dict() if formitem.items else {}\n            if update:\n                kwargs = deep_update(kwargs, update)\n            formitem.items = FormItem(**kwargs)\n        if isinstance(formitem, FormItem):\n            return formitem\n        # other type parse to FormItem\n        kwargs = self.get_field_amis_form_item_type(\n            type_=modelfield.type_,\n            is_filter=is_filter,\n            required=modelfield.required and not field_allow_none(modelfield),\n        )\n        return FormItem(**kwargs).update_from_dict(formitem)"}