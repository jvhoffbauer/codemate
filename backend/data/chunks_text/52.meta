{"original_code": "    def get_relationship_to(\n        name: str,\n        rel_info: \"RelationshipInfo\",\n        annotation: Any,\n    ) -> Any:\n        origin = get_origin(annotation)\n        use_annotation = annotation\n        # Direct relationships (e.g. 'Team' or Team) have None as an origin\n        if origin is None:\n            if isinstance(use_annotation, ForwardRef):\n                use_annotation = use_annotation.__forward_arg__\n            else:\n                return use_annotation\n        # If Union (e.g. Optional), get the real field\n        elif _is_union_type(origin):\n            use_annotation = get_args(annotation)\n            if len(use_annotation) > 2:\n                raise ValueError(\n                    \"Cannot have a (non-optional) union as a SQLAlchemy field\"\n                )\n            arg1, arg2 = use_annotation\n            if arg1 is NoneType and arg2 is not NoneType:\n                use_annotation = arg2\n            elif arg2 is NoneType and arg1 is not NoneType:\n                use_annotation = arg1\n            else:\n                raise ValueError(\n                    \"Cannot have a Union of None and None as a SQLAlchemy field\"\n                )\n\n        # If a list, then also get the real field\n        elif origin is list:\n            use_annotation = get_args(annotation)[0]\n\n        return get_relationship_to(\n            name=name, rel_info=rel_info, annotation=use_annotation\n        )"}