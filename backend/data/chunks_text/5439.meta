{"original_code": "    def assets(self):\n        \"\"\"Register /assets endpoint.\"\"\"\n\n        @self.router.get(\n            r\"/{minx},{miny},{maxx},{maxy}/assets\",\n            responses={200: {\"description\": \"Return list of COGs in bounding box\"}},\n        )\n        def assets_for_bbox(\n            src_path=Depends(self.path_dependency),\n            minx: float = Query(None, description=\"Left side of bounding box\"),\n            miny: float = Query(None, description=\"Bottom of bounding box\"),\n            maxx: float = Query(None, description=\"Right side of bounding box\"),\n            maxy: float = Query(None, description=\"Top of bounding box\"),\n            backend_params=Depends(self.backend_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return a list of assets which overlap a bounding box\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(\n                    src_path,\n                    reader=self.dataset_reader,\n                    reader_options={**reader_params},\n                    **backend_params,\n                ) as src_dst:\n                    return src_dst.assets_for_bbox(minx, miny, maxx, maxy)\n\n        @self.router.get(\n            r\"/{lng},{lat}/assets\",\n            responses={200: {\"description\": \"Return list of COGs\"}},\n        )\n        def assets_for_lon_lat(\n            src_path=Depends(self.path_dependency),\n            lng: float = Query(None, description=\"Longitude\"),\n            lat: float = Query(None, description=\"Latitude\"),\n            backend_params=Depends(self.backend_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return a list of assets which overlap a point\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(\n                    src_path,\n                    reader=self.dataset_reader,\n                    reader_options={**reader_params},\n                    **backend_params,\n                ) as src_dst:\n                    return src_dst.assets_for_point(lng, lat)\n\n        @self.router.get(\n            r\"/{z}/{x}/{y}/assets\",\n            responses={200: {\"description\": \"Return list of COGs\"}},\n        )\n        def assets_for_tile(\n            z: int = Path(..., ge=0, le=30, description=\"Mercator tiles's zoom level\"),\n            x: int = Path(..., description=\"Mercator tiles's column\"),\n            y: int = Path(..., description=\"Mercator tiles's row\"),\n            src_path=Depends(self.path_dependency),\n            backend_params=Depends(self.backend_dependency),\n            reader_params=Depends(self.reader_dependency),\n            env=Depends(self.environment_dependency),\n        ):\n            \"\"\"Return a list of assets which overlap a given tile\"\"\"\n            with rasterio.Env(**env):\n                with self.reader(\n                    src_path,\n                    reader=self.dataset_reader,\n                    reader_options={**reader_params},\n                    **backend_params,\n                ) as src_dst:\n                    return src_dst.assets_for_tile(x, y, z)"}