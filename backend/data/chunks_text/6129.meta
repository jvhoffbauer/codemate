{"original_code": "async def test_route_update(async_client: AsyncClient, fake_users, models):\n    # update one\n    res = await async_client.put(\n        \"/User/item/1\",\n        json={\n            \"username\": \"new_name\",\n            \"address\": [\"address_3\"],\n            \"attach\": {\"attach_3\": \"attach_3\"},\n        },\n    )\n    count = res.json()[\"data\"]\n    assert count == 1\n    user = await db.session.get(models.User, 1)\n    assert user.username == \"new_name\"\n    assert user.address == [\"address_3\"]\n    assert user.attach == {\"attach_3\": \"attach_3\"}\n    # update bulk\n    res = await async_client.put(\n        \"/User/item/1,2,4\",\n        json={\n            \"password\": \"new_password\",\n            \"address\": [\"address_3\"],\n            \"attach\": {\"attach_3\": \"attach_3\"},\n        },\n    )\n    count = res.json()[\"data\"]\n    assert count == 3\n    db.session.expire_all()\n    for user in await db.session.scalars(\n        select(models.User).where(models.User.id.in_([1, 2, 4]))\n    ):\n        assert user.password == \"new_password\"\n        assert user.address == [\"address_3\"]\n        assert user.attach == {\"attach_3\": \"attach_3\"}"}