- Defines an async generator function called `contextmanager_in_threadpool` that takes a context manager object and returns an async generator.
- The function creates a `CapacityLimiter` with a limit of 1 to prevent blocking during the context manager's `__exit__` method while waiting for a free thread in the thread pool.
- Inside the generator, it yields the result of calling `run_in_threadpool` with the context manager's `__enter__` method. If an exception occurs inside the generator, it calls `anyio.to_thread.run_sync` with the context manager's `__exit__` method, passing the exception details and the original context manager arguments. This ensures that the context manager's cleanup process runs before raising the exception again. Otherwise, after the successful execution of the generator body, it also calls `anyio.to_thread.run_sync` with the context manager's `__exit__` method but without passing any arguments or exceptions.