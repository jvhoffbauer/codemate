from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlmodel import Field, Session, SQLModel, create_engine, select


# Define the SQLModel for the User
class User(SQLModel, table=True):
    id: int = Field(default=None, primary_key=True)
    username: str
    password: str


# SQLite database URL
DATABASE_URL = "sqlite:///./test.db"

# Create the database engine
engine = create_engine(DATABASE_URL)


# Create the User table in the database
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)


# OAuth2PasswordBearer is a helper class to manage the OAuth2 authentication flow for password.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI()


# Endpoint for user login
@app.post("/login")
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    session: Session = Depends(get_session),
):
    # Query the user from the database
    user = session.exec(select(User).where(User.username == form_data.username)).first()

    if user is None or user.password != form_data.password:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return {"access_token": user.username, "token_type": "bearer"}
