from fastapi import HTTPException, Request


class AuthMiddleware:
    async def __call__(self, request: Request, call_next, *args, **kwargs):
        # Get the authorization header
        authorization_header = request.headers.get("Authorization")

        # Ensure the authorization header is present
        if not authorization_header:
            raise HTTPException(status_code=400, detail="Missing auth token")

        # Try to verify the token and get the user
        try:
            # Check if we have the token
            pass
        except ValueError:
            raise HTTPException(status_code=400, detail="Invalid auth token")

        # Run the function
        return await call_next(request)
