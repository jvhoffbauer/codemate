from typing import Annotated
from uuid import UUID

from dependency_injector.wiring import Provide, inject
from fastapi import APIRouter, Depends, HTTPException, status
from prompto_server import (
    ChatService,
    Container,
    FeedbackRequest,
    FeedbackResponse,
    Session,
)
from pydantic import BaseModel

router = APIRouter(tags=["chat"])


@router.post(
    "/chat/feedback",
    response_model=FeedbackResponse,
    responses={404: {"description": "Message not found"}},
)
@inject
async def feedback(
    feedback_rq: FeedbackRequest,
    session: Annotated[Session, Depends(current_user)],
    chat_service=Annotated[ChatService, Depends(Provide[Container.chat_service])],
):
    # Login Guard
    if not session:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Unauthorized"
        )

    try:
        await chat_service.feedback(
            session.uuid,
            feedback_rq.history_id,
            feedback_rq.message_id,
            feedback_rq.feedback_type,
        )
    except NotFoundException:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Message not found"
        )

    return FeedbackResponse(
        history_id=feedback_rq.history_id,
        message_id=feedback_rq.message_id,
        feedback_type=feedback_rq.feedback_type,
    )
